<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

use \php\Boot;
use \haxe\ds\List_hx;

/**
 * The `Lambda` class is a collection of methods to support functional
 * programming. It is ideally used with `using Lambda` and then acts as an
 * extension to Iterable types.
 * On static platforms, working with the Iterable structure might be slower
 * than performing the operations directly on known types, such as Array and
 * List.
 * If the first argument to any of the methods is null, the result is
 * unspecified.
 * @see https://haxe.org/manual/std-Lambda.html
 */
class Lambda {
	/**
	 * Creates an Array from Iterable `it`.
	 * If `it` is an Array, this function returns a copy of it.
	 * 
	 * @param object $it
	 * 
	 * @return \Array_hx
	 */
	static public function array ($it) {
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:47: characters 3-26
		$a = new \Array_hx();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:48: characters 12-14
		$i = $it->iterator();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:48: characters 12-14
		while ($i->hasNext()) {
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:48: lines 48-49
			$i1 = $i->next();
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:49: characters 4-13
			$a->arr[$a->length] = $i1;
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:49: characters 4-13
			++$a->length;
		}

		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:50: characters 3-11
		return $a;
	}


	/**
	 * Returns a new List containing all elements of Iterable `a` followed by
	 * all elements of Iterable `b`.
	 * If `a` or `b` are null, the result is unspecified.
	 * 
	 * @param object $a
	 * @param object $b
	 * 
	 * @return List_hx
	 */
	static public function concat ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:279: characters 3-22
		$l = new List_hx();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:280: characters 13-14
		$x = $a->iterator();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:280: characters 13-14
		while ($x->hasNext()) {
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:281: characters 4-12
			$l->add($x->next());
		}

		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:282: characters 13-14
		$x1 = $b->iterator();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:282: characters 13-14
		while ($x1->hasNext()) {
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:283: characters 4-12
			$l->add($x1->next());
		}

		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:284: characters 3-11
		return $l;
	}


	/**
	 * Returns the number of elements in `it` for which `pred` is true, or the
	 * total number of elements in `it` if `pred` is null.
	 * This function traverses all elements.
	 * 
	 * @param object $it
	 * @param \Closure $pred
	 * 
	 * @return int
	 */
	static public function count ($it, $pred = null) {
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:220: characters 3-13
		$n = 0;
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:221: lines 221-227
		if ($pred === null) {
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:222: characters 14-16
			$_ = $it->iterator();
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:222: characters 14-16
			while ($_->hasNext()) {
				#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:222: characters 14-16
				$_->next();
				#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:223: characters 5-8
				$n = $n + 1;
			}
		} else {
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:225: characters 14-16
			$x = $it->iterator();
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:225: characters 14-16
			while ($x->hasNext()) {
				#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:226: lines 226-227
				if ($pred($x->next())) {
					#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:227: characters 6-9
					$n = $n + 1;
				}
			}
		}
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:228: characters 3-11
		return $n;
	}


	/**
	 * Tells if Iterable `it` does not contain any element.
	 * 
	 * @param object $it
	 * 
	 * @return bool
	 */
	static public function empty ($it) {
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:235: characters 3-34
		return !$it->iterator()->hasNext();
	}


	/**
	 * Tells if `it` contains an element for which `f` is true.
	 * This function returns true as soon as an element is found for which a
	 * call to `f` returns true.
	 * If no such element is found, the result is false.
	 * If `f` is null, the result is unspecified.
	 * 
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return bool
	 */
	static public function exists ($it, $f) {
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:144: characters 13-15
		$x = $it->iterator();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:144: characters 13-15
		while ($x->hasNext()) {
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:145: lines 145-146
			if ($f($x->next())) {
				#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:146: characters 5-16
				return true;
			}
		}

		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:147: characters 3-15
		return false;
	}


	/**
	 * Returns a List containing those elements of `it` for which `f` returned
	 * true.
	 * If `it` is empty, the result is the empty List even if `f` is null.
	 * Otherwise if `f` is null, the result is unspecified.
	 * 
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return List_hx
	 */
	static public function filter ($it, $f) {
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:188: characters 3-25
		$l = new List_hx();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:189: characters 13-15
		$x = $it->iterator();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:189: characters 13-15
		while ($x->hasNext()) {
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:189: lines 189-191
			$x1 = $x->next();
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:190: lines 190-191
			if ($f($x1)) {
				#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:191: characters 5-13
				$l->add($x1);
			}
		}

		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:192: characters 3-11
		return $l;
	}


	/**
	 * Returns the first element of `it` for which `f` is true.
	 * This function returns as soon as an element is found for which a call to
	 * `f` returns true.
	 * If no such element is found, the result is null.
	 * If `f` is null, the result is unspecified.
	 * 
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return mixed
	 */
	static public function find ($it, $f) {
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:266: characters 13-15
		$v = $it->iterator();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:266: characters 13-15
		while ($v->hasNext()) {
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:266: lines 266-268
			$v1 = $v->next();
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:267: characters 4-21
			if ($f($v1)) {
				#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:267: characters 13-21
				return $v1;
			}
		}

		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:269: characters 3-14
		return null;
	}


	/**
	 * A composition of map and flatten.
	 * The order of elements is preserved.
	 * If `f` is null, the result is unspecified.
	 * 
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return List_hx
	 */
	static public function flatMap ($it, $f) {
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:115: characters 3-43
		return Lambda::flatten(Lambda::map($it, $f));
	}


	/**
	 * Concatenate a list of lists.
	 * The order of elements is preserved.
	 * 
	 * @param object $it
	 * 
	 * @return List_hx
	 */
	static public function flatten ($it) {
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:100: characters 3-25
		$l = new List_hx();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:101: characters 13-15
		$e = $it->iterator();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:101: characters 13-15
		while ($e->hasNext()) {
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:102: characters 14-15
			$x = $e->next()->iterator();
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:102: characters 14-15
			while ($x->hasNext()) {
				#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:103: characters 5-13
				$l->add($x->next());
			}
		}

		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:104: characters 3-11
		return $l;
	}


	/**
	 * Functional fold on Iterable `it`, using function `f` with start argument
	 * `first`.
	 * If `it` has no elements, the result is `first`.
	 * Otherwise the first element of `it` is passed to `f` alongside `first`.
	 * The result of that call is then passed to `f` with the next element of
	 * `it`, and so on until `it` has no more elements.
	 * If `it` or `f` are null, the result is unspecified.
	 * 
	 * @param object $it
	 * @param \Closure $f
	 * @param mixed $first
	 * 
	 * @return mixed
	 */
	static public function fold ($it, $f, $first) {
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:208: characters 13-15
		$x = $it->iterator();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:208: characters 13-15
		while ($x->hasNext()) {
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:209: characters 4-22
			$first = $f($x->next(), $first);
		}

		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:210: characters 3-15
		return $first;
	}


	/**
	 * Tells if `f` is true for all elements of `it`.
	 * This function returns false as soon as an element is found for which a
	 * call to `f` returns false.
	 * If no such element is found, the result is true.
	 * In particular, this function always returns true if `it` is empty.
	 * If `f` is null, the result is unspecified.
	 * 
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return bool
	 */
	static public function foreach ($it, $f) {
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:163: characters 13-15
		$x = $it->iterator();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:163: characters 13-15
		while ($x->hasNext()) {
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:164: lines 164-165
			if (!$f($x->next())) {
				#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:165: characters 5-17
				return false;
			}
		}

		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:166: characters 3-14
		return true;
	}


	/**
	 * Tells if `it` contains `elt`.
	 * This function returns true as soon as an element is found which is equal
	 * to `elt` according to the `==` operator.
	 * If no such element is found, the result is false.
	 * 
	 * @param object $it
	 * @param mixed $elt
	 * 
	 * @return bool
	 */
	static public function has ($it, $elt) {
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:127: characters 13-15
		$x = $it->iterator();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:127: characters 13-15
		while ($x->hasNext()) {
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:128: lines 128-129
			if (Boot::equal($x->next(), $elt)) {
				#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:129: characters 5-16
				return true;
			}
		}

		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:130: characters 3-15
		return false;
	}


	/**
	 * Returns the index of the first element `v` within Iterable `it`.
	 * This function uses operator `==` to check for equality.
	 * If `v` does not exist in `it`, the result is -1.
	 * 
	 * @param object $it
	 * @param mixed $v
	 * 
	 * @return int
	 */
	static public function indexOf ($it, $v) {
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:246: characters 3-13
		$i = 0;
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:247: characters 14-16
		$v2 = $it->iterator();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:247: characters 14-16
		while ($v2->hasNext()) {
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:248: lines 248-249
			if (Boot::equal($v, $v2->next())) {
				#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:249: characters 5-13
				return $i;
			}
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:250: characters 4-7
			$i = $i + 1;
		}

		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:252: characters 3-12
		return -1;
	}


	/**
	 * Calls `f` on all elements of `it`, in order.
	 * If `f` is null, the result is unspecified.
	 * 
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return void
	 */
	static public function iter ($it, $f) {
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:175: characters 13-15
		$x = $it->iterator();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:175: characters 13-15
		while ($x->hasNext()) {
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:176: characters 4-8
			$f($x->next());
		}
	}


	/**
	 * Creates a List form Iterable `it`.
	 * If `it` is a List, this function returns a copy of it.
	 * 
	 * @param object $it
	 * 
	 * @return List_hx
	 */
	static public function list ($it) {
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:59: characters 3-25
		$l = new List_hx();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:60: characters 12-14
		$i = $it->iterator();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:60: characters 12-14
		while ($i->hasNext()) {
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:61: characters 4-12
			$l->add($i->next());
		}

		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:62: characters 3-11
		return $l;
	}


	/**
	 * Creates a new List by applying function `f` to all elements of `it`.
	 * The order of elements is preserved.
	 * If `f` is null, the result is unspecified.
	 * 
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return List_hx
	 */
	static public function map ($it, $f) {
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:73: characters 3-25
		$l = new List_hx();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:74: characters 13-15
		$x = $it->iterator();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:74: characters 13-15
		while ($x->hasNext()) {
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:75: characters 4-15
			$l->add($f($x->next()));
		}

		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:76: characters 3-11
		return $l;
	}


	/**
	 * Similar to map, but also passes the index of each element to `f`.
	 * The order of elements is preserved.
	 * If `f` is null, the result is unspecified.
	 * 
	 * @param object $it
	 * @param \Closure $f
	 * 
	 * @return List_hx
	 */
	static public function mapi ($it, $f) {
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:87: characters 3-25
		$l = new List_hx();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:88: characters 3-13
		$i = 0;
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:89: characters 13-15
		$x = $it->iterator();
		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:89: characters 13-15
		while ($x->hasNext()) {
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:90: characters 12-15
			$i = $i + 1;
			#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:90: characters 4-19
			$l->add($f($i - 1, $x->next()));
		}

		#/Users/ut/haxe/haxe_libraries/hx3compat/1.0.3/github/5d05c5c1962387ac3ffe1cfb73c6c389c8b9cbbd/std/Lambda.hx:91: characters 3-11
		return $l;
	}
}


Boot::registerClass(Lambda::class, 'Lambda');
