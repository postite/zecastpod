<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace sys;

use \haxe\io\Path;
use \php\Boot;
use \php\_Boot\HxException;
use \php\_Boot\HxAnon;

/**
 * This class allows you to get information about the files and directories.
 * See `sys.io.File` for the complementary file API.
 */
class FileSystem {
	/**
	 * Returns the full path of the file or directory specified by `relPath`,
	 * which is relative to the current working directory. The path doesn't
	 * have to exist.
	 * If `relPath` is null, the result is unspecified.
	 * 
	 * @param string $relPath
	 * 
	 * @return string
	 */
	static public function absolutePath ($relPath) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:69: characters 3-47
		if (Path::isAbsolute($relPath)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:69: characters 33-47
			return $relPath;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:70: characters 3-44
		return Path::join(\Array_hx::wrap([
			\Sys::getCwd(),
			$relPath,
		]));
	}


	/**
	 * Returns the names of all files and directories in the directory specified
	 * by `path`.
	 * If `path` does not denote a valid directory, an exception is thrown.
	 * If `path` is null, the result is unspecified.
	 * 
	 * @param string $path
	 * 
	 * @return \Array_hx
	 */
	static public function readDirectory ($path) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:102: characters 3-17
		$list = new \Array_hx();
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:103: characters 3-34
		$dir = opendir($path);
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:104: characters 3-12
		$file = null;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:105: lines 105-109
		while (true) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:105: characters 10-38
			$file = readdir($dir);
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:105: lines 105-109
			if (!($file !== false)) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:105: lines 105-109
				break;
			}
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:106: lines 106-108
			if (($file !== ".") && ($file !== "..")) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:107: characters 5-20
				$list->arr[$list->length] = $file;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:107: characters 5-20
				++$list->length;
			}
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:110: characters 3-23
		closedir($dir);
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:111: characters 9-20
		return $list;
	}


	/**
	 * Returns `FileStat` information on the file or directory specified by
	 * `path`.
	 * If `path` is null, the result is unspecified.
	 * 
	 * @param string $path
	 * 
	 * @return object
	 */
	static public function stat ($path) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:45: characters 3-32
		$info = stat($path);
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:46: characters 3-27
		if ($info === false) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:46: characters 22-27
			throw new HxException("Unable to stat " . ($path??'null'));
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:47: characters 3-31
		$info1 = $info;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:52: characters 12-47
		$tmp = \Date::fromTime($info1["atime"] * 1000);
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:53: characters 12-47
		$tmp1 = \Date::fromTime($info1["mtime"] * 1000);
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:54: characters 12-47
		$tmp2 = \Date::fromTime($info1["ctime"] * 1000);
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/sys/FileSystem.hx:49: lines 49-61
		return new HxAnon([
			"gid" => $info1["gid"],
			"uid" => $info1["uid"],
			"atime" => $tmp,
			"mtime" => $tmp1,
			"ctime" => $tmp2,
			"dev" => $info1["dev"],
			"ino" => $info1["ino"],
			"nlink" => $info1["nlink"],
			"rdev" => $info1["rdev"],
			"size" => $info1["size"],
			"mode" => $info1["mode"],
		]);
	}
}


Boot::registerClass(FileSystem::class, 'sys.FileSystem');
