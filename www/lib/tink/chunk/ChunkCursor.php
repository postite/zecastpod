<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\chunk;

use \php\Boot;
use \tink\_Chunk\Chunk_Impl_;
use \haxe\ds\Option;

class ChunkCursor {
	/**
	 * @var int
	 */
	public $curLength;
	/**
	 * @var int
	 */
	public $curOffset;
	/**
	 * @var ByteChunk
	 */
	public $curPart;
	/**
	 * @var int
	 */
	public $curPartIndex;
	/**
	 * @var int
	 */
	public $currentByte;
	/**
	 * @var int
	 */
	public $currentPos;
	/**
	 * @var int
	 */
	public $length;
	/**
	 * @var \Array_hx
	 */
	public $parts;


	/**
	 * @param \Array_hx $parts
	 * 
	 * @return ChunkCursor
	 */
	static public function create ($parts) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:19: characters 5-33
		$ret = new ChunkCursor();
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:20: characters 5-22
		$ret->parts = $parts;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:21: characters 5-16
		$ret->reset();
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:22: characters 5-15
		return $ret;
	}


	/**
	 * @return void
	 */
	public function __construct () {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:16: characters 47-49
		$this->currentByte = -1;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:15: characters 46-47
		$this->currentPos = 0;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:14: characters 42-43
		$this->length = 0;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:12: characters 23-24
		$this->curLength = 0;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:11: characters 23-24
		$this->curOffset = 0;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:10: characters 26-27
		$this->curPartIndex = 0;
	}


	/**
	 *  Add a chunk to the end and reset `currentPos` to zero.
	 *  @param chunk - Chunk to be added
	 * 
	 * @param ChunkObject $chunk
	 * 
	 * @return void
	 */
	public function add ($chunk) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:81: characters 5-41
		$chunk->flatten($this->parts);
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:82: characters 5-12
		$this->reset();
	}


	/**
	 *  Clear all data of this cursor
	 * 
	 * @return void
	 */
	public function clear () {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:115: characters 5-15
		$this->parts = new \Array_hx();
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:116: characters 5-12
		$this->reset();
	}


	/**
	 *  Creates a cloned cursor
	 *  @return cloned cursor
	 * 
	 * @return ChunkCursor
	 */
	public function clone () {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:30: characters 5-33
		$ret = new ChunkCursor();
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:31: characters 5-34
		$ret->parts = $this->parts->copy();
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:32: characters 5-31
		$ret->curPart = $this->curPart;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:33: characters 5-41
		$ret->curPartIndex = $this->curPartIndex;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:34: characters 5-35
		$ret->curOffset = $this->curOffset;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:35: characters 5-35
		$ret->curLength = $this->curLength;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:36: characters 5-29
		$ret->length = $this->length;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:37: characters 5-37
		$ret->currentPos = $this->currentPos;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:38: characters 5-39
		$ret->currentByte = $this->currentByte;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:39: characters 5-15
		return $ret;
	}


	/**
	 * @return void
	 */
	public function ffwd () {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:274: characters 5-21
		$this->currentByte = -1;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:275: characters 5-18
		$this->curLength = 0;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:276: characters 5-18
		$this->curOffset = 0;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:277: characters 5-19
		$this->curPart = null;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:278: characters 5-32
		$this->curPartIndex = $this->parts->length;
	}


	/**
	 *  Like prune(), but returns the removed chunk
	 *  @return Removed chunk (chunk to the left of current position)
	 * 
	 * @return ChunkObject
	 */
	public function flush () {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:65: characters 5-22
		$ret = $this->left();
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:66: characters 5-12
		$this->shift();
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:67: characters 5-15
		return $ret;
	}


	/**
	 *  Return the chunk to the left of current position, excluding current byte
	 * 
	 * @return ChunkObject
	 */
	public function left () {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:123: characters 5-44
		if ($this->curPart === null) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:123: characters 26-44
			return Chunk_Impl_::$EMPTY;
		}
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:124: characters 16-62
		$_g = new \Array_hx();
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:124: characters 17-61
		$_g2 = 0;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:124: characters 17-61
		$_g1 = $this->curPartIndex;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:124: characters 17-61
		while ($_g2 < $_g1) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:124: characters 17-61
			$_g2 = $_g2 + 1;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:124: characters 45-61
			$_g->arr[$_g->length] = ($this->parts->arr[$_g2 - 1] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:124: characters 45-61
			++$_g->length;

		}

		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:125: characters 5-43
		$x = $this->curPart->slice(0, $this->curOffset);
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:125: characters 5-43
		$_g->arr[$_g->length] = $x;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:125: characters 5-43
		++$_g->length;

		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:126: characters 5-28
		return Chunk_Impl_::join($_g);
	}


	/**
	 *  Move cursor position by specified amount.
	 *  @param delta - amount to move
	 *  @return new position
	 * 
	 * @param int $delta
	 * 
	 * @return int
	 */
	public function moveBy ($delta) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:235: characters 5-38
		return $this->moveTo($this->currentPos + $delta);
	}


	/**
	 *  Move to specified position.
	 *  If `position` is greater than length of cursor, it is set to `length - 1`.
	 *  If `position` is less than zero, it is set to zero.
	 *  @param position - the position to move to
	 *  @return new position
	 * 
	 * @param int $position
	 * 
	 * @return int
	 */
	public function moveTo ($position) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:246: characters 5-30
		if ($this->length === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:246: characters 22-30
			return 0;
		}
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:248: characters 5-49
		if ($position > $this->length) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:248: characters 28-49
			$position = $this->length - 1;
		}
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:249: characters 5-35
		if ($position < 0) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:249: characters 23-35
			$position = 0;
		}
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:251: characters 5-31
		$this->currentPos = $position;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:253: lines 253-268
		if ($position === $this->length) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:253: characters 29-35
			$this->ffwd();
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:255: lines 255-268
			$_g1 = 0;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:255: lines 255-268
			$_g = $this->parts->length;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:255: lines 255-268
			while ($_g1 < $_g) {
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:255: lines 255-268
				$_g1 = $_g1 + 1;
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:255: characters 12-13
				$i = $_g1 - 1;
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:256: characters 9-26
				$c = ($this->parts->arr[$i] ?? null);
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:257: characters 16-29
				$_g2 = $c->to - $c->from;
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:258: lines 258-266
				if ($_g2 > $position) {
					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:259: characters 13-29
					$this->curPart = $c;
					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:260: characters 13-34
					$this->curPartIndex = $i;
					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:261: characters 13-38
					$this->curOffset = $position;
					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:262: characters 13-43
					$this->curLength = $c->to - $c->from;
					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:263: characters 13-51
					$this->currentByte = ord($c->data->s[$c->from + $position]);
					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:264: characters 13-18
					break;
				} else {
					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:266: characters 13-26
					$position = $position - $_g2;
				}

			}
		}
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:270: characters 5-27
		return $this->currentPos;
	}


	/**
	 *  Advance to next byte
	 *  @return `false` if there is no next byte
	 * 
	 * @return bool
	 */
	public function next () {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:286: characters 5-43
		if ($this->currentPos === $this->length) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:286: characters 31-43
			return false;
		}
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:287: characters 5-17
		$this->currentPos++;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:288: lines 288-291
		if ($this->currentPos === $this->length) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:289: characters 7-13
			$this->ffwd();
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:290: characters 7-19
			return false;
		}
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:292: lines 292-300
		if ($this->curOffset === ($this->curLength - 1)) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:293: characters 7-20
			$this->curOffset = 0;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:294: characters 7-38
			$this->curPart = ($this->parts->arr[++$this->curPartIndex] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:295: characters 19-38
			$_this = $this->curPart;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:295: characters 7-38
			$this->curLength = $_this->to - $_this->from;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:296: characters 21-39
			$_this1 = $this->curPart;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:296: characters 7-39
			$this->currentByte = ord($_this1->data->s[$_this1->from]);
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:299: characters 21-49
			$_this2 = $this->curPart;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:299: characters 7-49
			$this->currentByte = ord($_this2->data->s[$_this2->from + ++$this->curOffset]);
		}
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:301: characters 5-16
		return true;
	}


	/**
	 *  Remove chunk to the left of current position and reset `currentPos` to zero.
	 * 
	 * @return void
	 */
	public function prune () {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:74: characters 5-12
		$this->shift();
	}


	/**
	 * @return void
	 */
	public function reset () {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:45: characters 5-15
		$this->length = 0;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:46: characters 5-19
		$this->currentPos = 0;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:47: characters 5-21
		$this->currentByte = -1;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:48: characters 5-18
		$this->curOffset = 0;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:50: lines 50-51
		$_g = 0;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:50: lines 50-51
		$_g1 = $this->parts;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:50: lines 50-51
		while ($_g < $_g1->length) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:50: characters 10-11
			$p = ($_g1->arr[$_g] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:50: lines 50-51
			$_g = $_g + 1;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:51: characters 7-13
			$tmp = $this;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:51: characters 7-30
			$tmp->length = $tmp->length + ($p->to - $p->from);
		}

		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:53: characters 26-47
		$this->curPartIndex = 0;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:53: characters 5-48
		$this->curPart = ($this->parts->arr[0] ?? null);
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:54: lines 54-57
		if ($this->curPart !== null) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:55: characters 24-48
			$_this = $this->curPart;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:55: characters 7-48
			$this->curLength = $_this->to - $_this->from;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:56: characters 26-49
			$_this1 = $this->curPart;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:56: characters 7-49
			$this->currentByte = ord($_this1->data->s[$_this1->from]);
		}
	}


	/**
	 *  Return the chunk to the right of current position, including current byte
	 * 
	 * @return ChunkObject
	 */
	public function right () {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:133: characters 5-44
		if ($this->curPart === null) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:133: characters 26-44
			return Chunk_Impl_::$EMPTY;
		}
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:134: characters 17-74
		$_g = new \Array_hx();
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:134: characters 18-73
		$_g2 = $this->curPartIndex;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:134: characters 18-73
		$_g1 = $this->parts->length;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:134: characters 18-73
		while ($_g2 < $_g1) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:134: characters 18-73
			$_g2 = $_g2 + 1;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:134: characters 57-73
			$_g->arr[$_g->length] = ($this->parts->arr[$_g2 - 1] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:134: characters 57-73
			++$_g->length;

		}

		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:135: lines 135-137
		if ($_g->length > 0) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:136: characters 7-53
			$_g[0] = $this->curPart->slice($this->curOffset, $this->curLength);
		}
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:138: characters 5-29
		return Chunk_Impl_::join($_g);
	}


	/**
	 * @param \Array_hx $seekable
	 * @param object $options
	 * 
	 * @return Option
	 */
	public function seek ($seekable, $options = null) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:141: lines 141-208
		$_gthis = $this;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:143: lines 143-144
		if (($this->curPart === null) || ($seekable === null) || ($seekable->length === 0)) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:144: characters 7-18
			return Option::None();
		}
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:146: lines 146-150
		$max = $seekable->length - 1;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:146: lines 146-150
		$first = ($seekable->arr[0] ?? null);
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:146: lines 146-150
		$candidates = new \Array_hx();
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:146: lines 146-150
		$count = 0;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:146: lines 146-150
		$copy = $this->clone();
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:152: characters 5-17
		$copy->shift();
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:154: lines 154-194
		$part = function ($b, $offset)  use (&$count, &$copy, &$candidates, &$_gthis, &$first, &$max, &$seekable, &$options) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:155: characters 7-25
			$data = $b->data;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:157: lines 157-189
			$_g1 = $b->from + $offset;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:157: lines 157-189
			$_g = $b->to;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:157: lines 157-189
			while ($_g1 < $_g) {
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:157: lines 157-189
				$_g1 = $_g1 + 1;
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:157: characters 12-13
				$i = $_g1 - 1;
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:158: characters 9-36
				$byte = ord($data->s[$i]);
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:160: lines 160-185
				if ($candidates->length > 0) {
					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:161: characters 11-21
					$c = 0;
					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:162: lines 162-184
					while ($c < $count) {
						#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:163: characters 13-37
						$pos = ($candidates->arr[$c] ?? null);
						#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:164: lines 164-182
						if (($seekable->arr[$pos] ?? null) === $byte) {
							#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:165: lines 165-176
							if ($pos === $max) {
								#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:166: characters 17-71
								$copy->moveTo($copy->currentPos + ($i - ($b->from + $offset) - $seekable->length + 1));
								#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:167: characters 17-42
								$before = $copy->left();
								#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:168: characters 17-61
								$delta = $before->getLength() + $seekable->length;
								#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:168: characters 17-61
								$_gthis->moveTo($_gthis->currentPos + $delta);

								#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:169: lines 169-173
								if ($options === null) {
									#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:171: characters 21-33
									$_gthis->shift();
								} else if ($options->withoutPruning === null) {
									#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:171: characters 21-33
									$_gthis->shift();
								} else if ($options->withoutPruning === false) {
									#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:171: characters 21-33
									$_gthis->shift();
								}
								#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:174: characters 17-36
								return Option::Some($before);
							} else {
								#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:176: characters 31-34
								$c = $c + 1;
								#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:176: characters 20-45
								$candidates[$c - 1] = $pos + 1;
							}
						} else {
							#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:178: characters 15-22
							$count = $count - 1;
							#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:179: characters 26-42
							if ($candidates->length > 0) {
								#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:179: characters 26-42
								$candidates->length--;
							}
							#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:179: characters 15-43
							$last = array_pop($candidates->arr);
							#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:180: lines 180-181
							if ($count > $c) {
								#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:181: characters 17-37
								$candidates[$c] = $last;
							}
						}
					}
				}
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:187: lines 187-188
				if ($byte === $first) {
					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:188: characters 19-37
					$candidates->arr[$candidates->length] = 1;
					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:188: characters 19-37
					$count = ++$candidates->length;
				}
			}

			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:191: characters 7-44
			$copy->moveTo($copy->currentPos + ($b->to - ($b->from + $offset)));
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:193: characters 7-18
			return Option::None();
		};
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:196: characters 12-36
		$_g2 = $part($this->curPart, $this->curOffset);
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:196: characters 12-36
		if ($_g2->index === 1) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:199: lines 199-203
			$_g11 = $this->curPartIndex + 1;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:199: lines 199-203
			$_g3 = $this->parts->length;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:199: lines 199-203
			while ($_g11 < $_g3) {
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:199: lines 199-203
				$_g11 = $_g11 + 1;
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:200: characters 18-35
				$_g21 = $part(($this->parts->arr[$_g11 - 1] ?? null), 0);
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:200: characters 18-35
				switch ($_g21->index) {
					case 0:
						#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:201: characters 27-41
						return Option::Some($_g21->params[0]);
						break;
					case 1:
												break;
				}

			}

			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:205: characters 9-20
			return Option::None();
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:206: characters 15-23
			return $_g2;
		}
	}


	/**
	 *  Remove data to the left of current position and optionally add a chunk at the end.
	 *  Reset `currentPos` to zero.
	 *  @param chunk - Optional chunk to be added to the end
	 * 
	 * @param ChunkObject $chunk
	 * 
	 * @return void
	 */
	public function shift ($chunk = null) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:92: characters 5-34
		$this->parts->splice(0, $this->curPartIndex);
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:94: characters 12-20
		$_g = ($this->parts->arr[0] ?? null);
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:95: lines 95-102
		if ($_g !== null) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:97: characters 16-52
			$_g1 = $_g->getSlice($this->curOffset, $this->curLength);
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:98: lines 98-101
			if ($_g1 === null) {
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:99: characters 13-26
				$_this = $this->parts;
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:99: characters 13-26
				if ($_this->length > 0) {
					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:99: characters 13-26
					$_this->length--;
				}
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:99: characters 13-26
				array_shift($_this->arr);
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:101: characters 13-28
				$this->parts[0] = $_g1;
			}
		}

		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:105: lines 105-108
		if ($chunk !== null) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:106: characters 7-17
			$this->add($chunk);
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:108: characters 7-14
			$this->reset();
		}
	}


	/**
	 *  Like moveBy(), but returns the swept chunk instead of new position
	 *  @param len - length to sweep
	 *  @return the swept chunk
	 * 
	 * @param int $len
	 * 
	 * @return ChunkObject
	 */
	public function sweep ($len) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:216: characters 5-38
		$data = $this->right()->slice(0, $len);
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:217: characters 5-16
		$this->moveTo($this->currentPos + $len);
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:218: characters 5-16
		return $data;
	}


	/**
	 *  Like moveTo(), but returns the swept chunk instead of new position
	 *  @param pos - target position
	 *  @return the swept chunk
	 * 
	 * @param int $pos
	 * 
	 * @return ChunkObject
	 */
	public function sweepTo ($pos) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ChunkCursor.hx:227: characters 5-35
		return $this->sweep($pos - $this->currentPos);
	}
}


Boot::registerClass(ChunkCursor::class, 'tink.chunk.ChunkCursor');
