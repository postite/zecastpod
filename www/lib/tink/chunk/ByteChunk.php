<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\chunk;

use \php\Boot;
use \php\_Boot\HxException;
use \haxe\io\Bytes;
use \tink\_Chunk\Chunk_Impl_;
use \haxe\io\_BytesData\Container;
use \haxe\io\Error;

class ByteChunk extends ChunkBase implements ChunkObject {
	/**
	 * @var Container
	 */
	public $data;
	/**
	 * @var int
	 */
	public $from;
	/**
	 * @var int
	 */
	public $to;
	/**
	 * @var Bytes
	 */
	public $wrapped;


	/**
	 * @param Bytes $b
	 * 
	 * @return ChunkObject
	 */
	static public function of ($b) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:65: lines 65-66
		if ($b->length === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:66: characters 7-25
			return Chunk_Impl_::$EMPTY;
		}
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:67: characters 5-55
		$ret = new ByteChunk($b->b, 0, $b->length);
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:68: characters 5-20
		$ret->wrapped = $b;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:69: characters 5-15
		return $ret;
	}


	/**
	 * @param Container $data
	 * @param int $from
	 * @param int $to
	 * 
	 * @return void
	 */
	public function __construct ($data, $from, $to) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:21: characters 5-21
		$this->data = $data;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:22: characters 5-21
		$this->from = $from;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:23: characters 5-17
		$this->to = $to;
	}


	/**
	 * @param Bytes $target
	 * @param int $offset
	 * 
	 * @return void
	 */
	public function blitTo ($target, $offset) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:56: characters 25-32
		if ($this->wrapped === null) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:56: characters 25-32
			$b = $this->data;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:56: characters 25-32
			$this->wrapped = new Bytes(strlen($b->s), $b);
		}
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:56: characters 5-52
		$src = $this->wrapped;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:56: characters 5-52
		$srcpos = $this->from;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:56: characters 5-52
		$len = $this->to - $this->from;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:56: characters 5-52
		if (($offset < 0) || ($srcpos < 0) || ($len < 0) || (($offset + $len) > $target->length) || (($srcpos + $len) > $src->length)) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:56: characters 5-52
			throw new HxException(Error::OutsideBounds());
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:56: characters 5-52
			$this1 = $target->b;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:56: characters 5-52
			$src1 = $src->b;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:56: characters 5-52
			$this1->s = ((substr($this1->s, 0, $offset) . substr($src1->s, $srcpos, $len)) . substr($this1->s, $offset + $len));
		}
	}


	/**
	 * @param \Array_hx $into
	 * 
	 * @return void
	 */
	public function flatten ($into) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:30: characters 5-20
		$into->arr[$into->length] = $this;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:30: characters 5-20
		++$into->length;
	}


	/**
	 * @param int $index
	 * 
	 * @return int
	 */
	public function getByte ($index) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:27: characters 12-45
		return ord($this->data->s[$this->from + $index]);
	}


	/**
	 * @return int
	 */
	public function getLength () {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:33: characters 5-21
		return $this->to - $this->from;
	}


	/**
	 * @param int $from
	 * @param int $to
	 * 
	 * @return ByteChunk
	 */
	public function getSlice ($from, $to) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:36: lines 36-37
		if ($to > ($this->to - $this->from)) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:37: characters 7-28
			$to = $this->to - $this->from;
		}
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:39: lines 39-40
		if ($from < 0) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:40: characters 7-15
			$from = 0;
		}
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:43: lines 43-45
		if ($to <= $from) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:43: characters 23-27
			return null;
		} else if (($to === ($this->to - $this->from)) && ($from === 0)) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:44: characters 53-57
			return $this;
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:45: characters 12-65
			return new ByteChunk($this->data, $this->from + $from, $to + $this->from);
		}
	}


	/**
	 * @return Bytes
	 */
	public function get_wrapped () {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:15: lines 15-16
		if ($this->wrapped === null) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:16: characters 19-37
			$b = $this->data;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:16: characters 9-37
			$this->wrapped = new Bytes(strlen($b->s), $b);
		}
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:17: characters 7-21
		return $this->wrapped;
	}


	/**
	 * @param int $from
	 * @param int $to
	 * 
	 * @return ChunkObject
	 */
	public function slice ($from, $to) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:50: characters 14-32
		$_g = $this->getSlice($from, $to);
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:51: lines 51-52
		if ($_g === null) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:51: characters 20-31
			return Chunk_Impl_::$EMPTY;
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:52: characters 17-18
			return $_g;
		}
	}


	/**
	 * @return Bytes
	 */
	public function toBytes () {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:59: characters 12-19
		if ($this->wrapped === null) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:59: characters 12-19
			$b = $this->data;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:59: characters 12-19
			$this->wrapped = new Bytes(strlen($b->s), $b);
		}
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:59: characters 12-42
		$_this = $this->wrapped;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:59: characters 12-42
		$pos = $this->from;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:59: characters 12-42
		$len = $this->to - $this->from;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:59: characters 12-42
		if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:59: characters 12-42
			throw new HxException(Error::OutsideBounds());
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:59: characters 12-42
			return new Bytes($len, new Container(substr($_this->b->s, $pos, $len)));
		}
	}


	/**
	 * @return string
	 */
	public function toString () {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:62: characters 12-19
		if ($this->wrapped === null) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:62: characters 12-19
			$b = $this->data;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:62: characters 12-19
			$this->wrapped = new Bytes(strlen($b->s), $b);
		}
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:62: characters 12-48
		$_this = $this->wrapped;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:62: characters 12-48
		$pos = $this->from;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:62: characters 12-48
		$len = $this->to - $this->from;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:62: characters 12-48
		if (($pos < 0) || ($len < 0) || (($pos + $len) > $_this->length)) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:62: characters 12-48
			throw new HxException(Error::OutsideBounds());
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/chunk/ByteChunk.hx:62: characters 12-48
			return substr($_this->b->s, $pos, $len);
		}
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(ByteChunk::class, 'tink.chunk.ByteChunk');
Boot::registerGetters('tink\\chunk\\ByteChunk', [
	'wrapped' => true
]);
