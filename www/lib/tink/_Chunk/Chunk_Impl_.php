<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\_Chunk;

use \tink\chunk\ChunkObject;
use \php\Boot;
use \php\_Boot\HxString;
use \haxe\io\Bytes;
use \tink\chunk\ChunkIterator;
use \tink\chunk\ChunkCursor;
use \tink\chunk\ByteChunk;
use \haxe\io\_BytesData\Container;

final class Chunk_Impl_ {
	/**
	 * @var ChunkObject
	 */
	static public $EMPTY;


	/**
	 * @param ChunkObject $this
	 * @param Bytes $target
	 * @param int $offset
	 * 
	 * @return void
	 */
	static public function blitTo ($this1, $target, $offset) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:94: characters 12-39
		$this1->blitTo($target, $offset);
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:94: characters 5-39
		return;
	}


	/**
	 * @param ChunkObject $a
	 * @param ChunkObject $b
	 * 
	 * @return ChunkObject
	 */
	static public function catChunk ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:130: characters 5-23
		return Chunk_Impl_::concat($a, $b);
	}


	/**
	 * @param ChunkObject $this
	 * @param ChunkObject $that
	 * 
	 * @return ChunkObject
	 */
	static public function concat ($this1, $that) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:77: characters 28-39
		$_g = $that->getLength();
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:77: characters 20-26
		if ($this1->getLength() === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:77: characters 28-39
			if ($_g === 0) {
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:78: characters 20-25
				return Chunk_Impl_::$EMPTY;
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:79: characters 20-24
				return $that;
			}
		} else if ($_g === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:80: characters 20-24
			return $this1;
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:81: characters 15-44
			return new CompoundChunk($this1, $that);
		}
	}


	/**
	 * @param ChunkObject $this
	 * 
	 * @return ChunkCursor
	 */
	static public function cursor ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:85: characters 5-28
		return $this1->getCursor();
	}


	/**
	 * @param ChunkObject $this
	 * 
	 * @return int
	 */
	static public function get_length ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:74: characters 7-30
		return $this1->getLength();
	}


	/**
	 * @param ChunkObject $this
	 * 
	 * @return ChunkIterator
	 */
	static public function iterator ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:88: characters 5-47
		return new ChunkIterator($this1->getCursor());
	}


	/**
	 * @param \Array_hx $chunks
	 * 
	 * @return ChunkObject
	 */
	static public function join ($chunks) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:106: lines 106-114
		if ($chunks === null) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:107: characters 23-28
			return Chunk_Impl_::$EMPTY;
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:106: characters 19-25
			switch ($chunks->length) {
				case 0:
					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:107: characters 23-28
					return Chunk_Impl_::$EMPTY;
					break;
				case 1:
					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:108: characters 17-18
					return ($chunks->arr[0] ?? null);
					break;
				default:
					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:110: characters 9-31
					$ret = Chunk_Impl_::catChunk(($chunks->arr[0] ?? null), ($chunks->arr[1] ?? null));
					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:111: lines 111-112
					$_g1 = 2;
					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:111: lines 111-112
					$_g = $chunks->length;
					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:111: lines 111-112
					while ($_g1 < $_g) {
						#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:111: lines 111-112
						$_g1 = $_g1 + 1;
						#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:112: characters 11-27
						$ret = Chunk_Impl_::catChunk($ret, ($chunks->arr[$_g1 - 1] ?? null));
					}

					#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:113: characters 9-12
					return $ret;
					break;
			}
		}
	}


	/**
	 * @param Bytes $a
	 * @param ChunkObject $b
	 * 
	 * @return ChunkObject
	 */
	static public function lcatBytes ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:139: characters 5-26
		return Chunk_Impl_::catChunk(ByteChunk::of($a), $b);
	}


	/**
	 * @param string $a
	 * @param ChunkObject $b
	 * 
	 * @return ChunkObject
	 */
	static public function lcatString ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:136: characters 5-26
		return Chunk_Impl_::catChunk(Chunk_Impl_::ofBytes(new Bytes(strlen($a), new Container($a))), $b);
	}


	/**
	 * @param Bytes $b
	 * 
	 * @return ChunkObject
	 */
	static public function ofBytes ($b) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:117: characters 5-43
		return ByteChunk::of($b);
	}


	/**
	 * @param string $s
	 * 
	 * @return ChunkObject
	 */
	static public function ofHex ($s) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:123: characters 5-32
		$length = strlen($s) >> 1;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:124: characters 5-37
		$bytes = Bytes::alloc($length);
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:125: characters 5-79
		$_g1 = 0;
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:125: characters 5-79
		while ($_g1 < $length) {
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:125: characters 5-79
			$_g1 = $_g1 + 1;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:125: characters 9-10
			$i = $_g1 - 1;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:125: characters 26-79
			$v = \Std::parseInt("0x" . (HxString::substr($s, $i * 2, 2)??'null'));
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:125: characters 26-79
			$this1 = $bytes->b;
			#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:125: characters 26-79
			$this1->s = substr_replace($this1->s, chr($v), $i, 1);


		}

		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:126: characters 5-17
		return ByteChunk::of($bytes);
	}


	/**
	 * @param string $s
	 * 
	 * @return ChunkObject
	 */
	static public function ofString ($s) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:120: characters 5-38
		return Chunk_Impl_::ofBytes(new Bytes(strlen($s), new Container($s)));
	}


	/**
	 * @param ChunkObject $a
	 * @param Bytes $b
	 * 
	 * @return ChunkObject
	 */
	static public function rcatBytes ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:142: characters 5-26
		return Chunk_Impl_::catChunk($a, ByteChunk::of($b));
	}


	/**
	 * @param ChunkObject $a
	 * @param string $b
	 * 
	 * @return ChunkObject
	 */
	static public function rcatString ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:133: characters 5-26
		return Chunk_Impl_::catChunk($a, Chunk_Impl_::ofBytes(new Bytes(strlen($b), new Container($b))));
	}


	/**
	 * @param ChunkObject $this
	 * @param int $from
	 * @param int $to
	 * 
	 * @return ChunkObject
	 */
	static public function slice ($this1, $from, $to) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:91: characters 5-32
		return $this1->slice($from, $to);
	}


	/**
	 * @param ChunkObject $this
	 * 
	 * @return Bytes
	 */
	static public function toBytes ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:103: characters 5-26
		return $this1->toBytes();
	}


	/**
	 * @param ChunkObject $this
	 * 
	 * @return string
	 */
	static public function toHex ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:97: characters 5-34
		return $this1->toBytes()->toHex();
	}


	/**
	 * @param ChunkObject $this
	 * 
	 * @return string
	 */
	static public function toString ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_chunk/0.2.0/haxelib/src/tink/Chunk.hx:100: characters 5-27
		return $this1->toString();
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$EMPTY = new EmptyChunk();
	}
}


Boot::registerClass(Chunk_Impl_::class, 'tink._Chunk.Chunk_Impl_');
Boot::registerGetters('tink\\_Chunk\\Chunk_Impl_', [
	'length' => true
]);
Chunk_Impl_::__hx__init();
