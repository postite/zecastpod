<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\http;

use \tink\streams\_Stream\Stream_Impl_;
use \php\Boot;
use \haxe\io\_BytesData\Container as _BytesDataContainer;
use \haxe\io\Bytes;
use \tink\io\Transformer;
use \tink\streams\StreamObject;
use \tink\_Chunk\Chunk_Impl_;
use \tink\io\_Source\Source_Impl_;
use \tink\streams\_Stream\Mapping_Impl_;

class ChunkedEncoder implements Transformer {
	/**
	 * @return void
	 */
	public function __construct () {
	}


	/**
	 * @param StreamObject $source
	 * 
	 * @return StreamObject
	 */
	public function transform ($source) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Chunked.hx:38: lines 38-40
		return Source_Impl_::chunked($source)->map(Mapping_Impl_::ofPlain(function ($chunk) {
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Chunked.hx:39: characters 43-78
			$s = "" . (\StringTools::hex($chunk->getLength())??'null') . "\x0D\x0A";
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Chunked.hx:39: characters 36-87
			return Chunk_Impl_::catChunk(Chunk_Impl_::catChunk(Chunk_Impl_::ofBytes(new Bytes(strlen($s), new _BytesDataContainer($s))), $chunk), Chunk_Impl_::ofBytes(new Bytes(strlen("\x0D\x0A"), new _BytesDataContainer("\x0D\x0A"))));
		}))->append(Stream_Impl_::ofIterator((\Array_hx::wrap([Chunk_Impl_::ofBytes(new Bytes(strlen("0\x0D\x0A"), new _BytesDataContainer("0\x0D\x0A")))]))->iterator()));
	}
}


Boot::registerClass(ChunkedEncoder::class, 'tink.http.ChunkedEncoder');
