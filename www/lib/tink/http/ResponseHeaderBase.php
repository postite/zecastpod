<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\http;

use \tink\core\Outcome;
use \php\Boot;
use \tink\core\TypedError;
use \tink\io\StreamParserObject;
use \php\_Boot\HxAnon;
use \httpstatus\_HttpStatusMessage\HttpStatusMessage_Impl_;

class ResponseHeaderBase extends Header {
	/**
	 * @var string
	 */
	public $protocol;
	/**
	 * @var string
	 */
	public $reason;
	/**
	 * @var int
	 */
	public $statusCode;


	/**
	 * @return StreamParserObject
	 */
	static public function parser () {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:51: lines 51-58
		return new HeaderParser(function ($line, $headers) {
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:52: characters 21-36
			$_g = \Array_hx::wrap(explode(" ", $line));
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:53: lines 53-56
			if ($_g->length >= 3) {
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:54: characters 19-94
				$statusCode = \Std::parseInt(($_g->arr[1] ?? null));
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:54: characters 19-94
				$reason = $_g->slice(2)->join(" ");
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:54: characters 11-95
				return Outcome::Success(new ResponseHeaderBase($statusCode, $reason, $headers, ($_g->arr[0] ?? null)));
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:56: characters 11-82
				return Outcome::Failure(new TypedError(422, "Invalid HTTP response header", new HxAnon([
					"fileName" => "tink/http/Response.hx",
					"lineNumber" => 56,
					"className" => "tink.http.ResponseHeaderBase",
					"methodName" => "parser",
				])));
			}
		});
	}


	/**
	 * @param int $statusCode
	 * @param string $reason
	 * @param \Array_hx $fields
	 * @param string $protocol
	 * 
	 * @return void
	 */
	public function __construct ($statusCode, $reason = null, $fields = null, $protocol = "HTTP/1.1") {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:37: lines 37-42
		if ($protocol === null) {
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:37: lines 37-42
			$protocol = "HTTP/1.1";
		}
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:38: characters 5-33
		$this->statusCode = $statusCode;
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:39: characters 5-55
		$this->reason = ($reason === null ? HttpStatusMessage_Impl_::fromCode($statusCode) : $reason);
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:40: characters 5-29
		$this->protocol = $protocol;
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:41: characters 5-18
		parent::__construct($fields);
	}


	/**
	 * @param \Array_hx $fields
	 * 
	 * @return ResponseHeaderBase
	 */
	public function concat ($fields) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:45: characters 12-88
		$statusCode = $this->statusCode;
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:45: characters 12-88
		$reason = $this->reason;
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:45: characters 12-88
		$fields1 = $this->fields->concat($fields);
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:45: characters 12-88
		return new ResponseHeaderBase($statusCode, $reason, $fields1, $this->protocol);
	}


	/**
	 * @return string
	 */
	public function toString () {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:48: characters 5-82
		return "" . ($this->protocol??'null') . " " . ($this->statusCode??'null') . " " . ($this->reason??'null') . "\x0D\x0A" . (parent::toString()??'null');
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(ResponseHeaderBase::class, 'tink.http.ResponseHeaderBase');
