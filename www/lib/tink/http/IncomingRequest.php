<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\http;

use \tink\core\_Promise\Promise_Impl_;
use \php\_Boot\HxClosure;
use \tink\core\Outcome;
use \php\Boot;
use \tink\core\TypedError;
use \tink\core\_Future\FutureObject;
use \tink\io\RealSourceTools;
use \tink\streams\StreamObject;
use \tink\io\_Source\Source_Impl_;
use \php\_Boot\HxAnon;

class IncomingRequest extends Message {
	/**
	 * @var string
	 */
	public $clientIp;


	/**
	 * @param string $clientIp
	 * @param StreamObject $source
	 * 
	 * @return FutureObject
	 */
	static public function parse ($clientIp, $source) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:130: lines 130-145
		return Promise_Impl_::next(RealSourceTools::parse($source, IncomingRequestHeader::parser()), function ($parts)  use (&$clientIp) {
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:134: characters 11-18
			$parts1 = $parts->a;
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:135: characters 24-50
			$_g = $parts->a->getContentLength();
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:135: lines 135-144
			$d = null;
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:135: characters 24-50
			switch ($_g->index) {
				case 0:
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:135: lines 135-144
					$d = Source_Impl_::limit($parts->b, $_g->params[0]);
					break;
				case 1:
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:139: characters 39-72
					$_g1 = $parts->a->byName("transfer-encoding");
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:139: characters 23-37
					switch ($parts->a->method) {
						case "GET":
						case "OPTIONS":
							#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:135: lines 135-144
							$d = Source_Impl_::$EMPTY;
							break;
						default:
							#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:139: characters 39-72
							if ($_g1->index === 0) {
								#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:141: characters 34-77
								$_this = \Array_hx::wrap(explode(",", $_g1->params[0]));
								#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:141: characters 34-77
								$f = new HxClosure(\StringTools::class, 'trim');
								#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:141: characters 34-77
								$result = [];
								#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:141: characters 34-77
								$_g11 = 0;
								#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:141: characters 34-77
								$_g2 = $_this->length;
								#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:141: characters 34-77
								while ($_g11 < $_g2) {
									#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:141: characters 34-77
									$_g11 = $_g11 + 1;
									#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:141: characters 34-77
									$result[] = $f($_this->arr[$_g11 - 1]);
								}

								#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:141: lines 141-142
								if (\Array_hx::wrap($result)->indexOf("chunked") !== -1) {
									#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:141: characters 133-156
									$source1 = $parts->b;
									#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:135: lines 135-144
									$d = Chunked::decoder()->transform($source1);
								} else {
									#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:142: characters 25-79
									return Promise_Impl_::ofOutcome(Outcome::Failure(new TypedError(411, "Content-Length header missing", new HxAnon([
										"fileName" => "tink/http/Request.hx",
										"lineNumber" => 142,
										"className" => "tink.http.IncomingRequest",
										"methodName" => "parse",
									]))));
								}
							} else {
								#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:142: characters 25-79
								return Promise_Impl_::ofOutcome(Outcome::Failure(new TypedError(411, "Content-Length header missing", new HxAnon([
									"fileName" => "tink/http/Request.hx",
									"lineNumber" => 142,
									"className" => "tink.http.IncomingRequest",
									"methodName" => "parse",
								]))));
							}
							break;
					}
					break;
			}
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:132: lines 132-145
			return Promise_Impl_::ofOutcome(Outcome::Success(new IncomingRequest($clientIp, $parts1, IncomingRequestBody::Plain($d))));
		});
	}


	/**
	 * @param string $clientIp
	 * @param IncomingRequestHeader $header
	 * @param IncomingRequestBody $body
	 * 
	 * @return void
	 */
	public function __construct ($clientIp, $header, $body) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:125: characters 5-29
		$this->clientIp = $clientIp;
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Request.hx:126: characters 5-24
		parent::__construct($header, $body);
	}
}


Boot::registerClass(IncomingRequest::class, 'tink.http.IncomingRequest');
