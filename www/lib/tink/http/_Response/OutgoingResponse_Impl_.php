<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\http\_Response;

use \tink\chunk\ChunkObject;
use \tink\http\ResponseHeaderBase;
use \tink\http\HeaderField;
use \php\Boot;
use \tink\core\TypedError;
use \haxe\io\Bytes;
use \tink\streams\StreamObject;
use \tink\http\_Header\HeaderName_Impl_;
use \tink\_Chunk\Chunk_Impl_;
use \haxe\io\_BytesData\Container;
use \tink\io\_Source\Source_Impl_;
use \tink\streams\Single;
use \haxe\Json;
use \php\_Boot\HxAnon;
use \tink\core\_Lazy\LazyConst;
use \httpstatus\_HttpStatusMessage\HttpStatusMessage_Impl_;

final class OutgoingResponse_Impl_ {
	/**
	 * @param ResponseHeaderBase $header
	 * @param StreamObject $body
	 * 
	 * @return OutgoingResponseData
	 */
	static public function _new ($header, $body) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:65: character 17
		return new OutgoingResponseData($header, $body);
	}


	/**
	 * @param int $code
	 * @param ChunkObject $chunk
	 * @param string $contentType
	 * @param \Array_hx $headers
	 * 
	 * @return OutgoingResponseData
	 */
	static public function blob ($code = 200, $chunk, $contentType, $headers = null) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:69: lines 69-82
		if ($code === null) {
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:69: lines 69-82
			$code = 200;
		}
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:73: characters 13-17
		$this1 = HttpStatusMessage_Impl_::fromCode($code);
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:75: characters 15-59
		$fields = new HeaderField(HeaderName_Impl_::ofString("Content-Type"), $contentType);
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:76: characters 32-46
		$fields1 = HeaderName_Impl_::ofString("Content-Length");
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:71: lines 71-80
		$this2 = new ResponseHeaderBase($code, $this1, (\Array_hx::wrap([
			$fields,
			new HeaderField($fields1, \Std::string($chunk->getLength())),
		]))->concat(($headers === null ? new \Array_hx() : $headers)), "HTTP/1.1");
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:70: lines 70-82
		return new OutgoingResponseData($this2, new Single(new LazyConst($chunk)));
	}


	/**
	 * @param string $contentType
	 * @param mixed $headers
	 * @param StreamObject $source
	 * 
	 * @return void
	 */
	static public function chunked ($contentType, $headers = null, $source) {
	}


	/**
	 * @param ChunkObject $c
	 * 
	 * @return OutgoingResponseData
	 */
	static public function ofChunk ($c) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:93: characters 5-47
		return OutgoingResponse_Impl_::blob(null, $c, "application/octet-stream");
	}


	/**
	 * @param string $s
	 * 
	 * @return OutgoingResponseData
	 */
	static public function ofString ($s) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:90: characters 5-33
		return OutgoingResponse_Impl_::blob(null, Chunk_Impl_::ofBytes(new Bytes(strlen($s), new Container($s))), "text/plain");
	}


	/**
	 * @param TypedError $e
	 * 
	 * @return OutgoingResponseData
	 */
	static public function reportError ($e) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:97: characters 7-96
		$this1 = new ResponseHeaderBase($e->code, HttpStatusMessage_Impl_::fromCode($e->code), \Array_hx::wrap([new HeaderField(HeaderName_Impl_::ofString("Content-Type"), "application/json")]), "HTTP/1.1");
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:98: lines 98-102
		$s = Json::phpJsonEncode(new HxAnon([
			"error" => $e->message,
			"details" => $e->data,
		]), null, null);
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Response.hx:96: lines 96-103
		return new OutgoingResponseData($this1, Source_Impl_::ofChunk(Chunk_Impl_::ofBytes(new Bytes(strlen($s), new Container($s)))));
	}
}


Boot::registerClass(OutgoingResponse_Impl_::class, 'tink.http._Response.OutgoingResponse_Impl_');
