<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\http;

use \php\Boot;
use \tink\core\TypedError;
use \tink\io\ParseStep;
use \tink\io\BytewiseParser;
use \php\_Boot\HxAnon;

class HeaderParser extends BytewiseParser {
	/**
	 * @var ParseStep
	 */
	static public $INVALID;


	/**
	 * @var \StringBuf
	 */
	public $buf;
	/**
	 * @var \Array_hx
	 */
	public $fields;
	/**
	 * @var mixed
	 */
	public $header;
	/**
	 * @var int
	 */
	public $last;
	/**
	 * @var \Closure
	 */
	public $makeHeader;


	/**
	 * @param \Closure $makeHeader
	 * 
	 * @return void
	 */
	public function __construct ($makeHeader) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:298: characters 18-20
		$this->last = -1;
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:303: characters 5-31
		$this->buf = new \StringBuf();
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:304: characters 5-33
		$this->makeHeader = $makeHeader;
	}


	/**
	 * @return ParseStep
	 */
	public function nextLine () {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:345: characters 5-31
		$line = $this->buf->b;
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:347: characters 5-26
		$this->buf = new \StringBuf();
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:348: characters 5-14
		$this->last = -1;
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:351: lines 351-372
		if ($line === "") {
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:353: lines 353-356
			if ($this->header === null) {
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:354: characters 13-23
				return ParseStep::Progressed();
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:356: characters 13-25
				return ParseStep::Done($this->header);
			}
		} else if ($this->header === null) {
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:359: characters 20-49
			$_g = ($this->makeHeader)($line, $this->fields = new \Array_hx());
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:359: characters 20-49
			switch ($_g->index) {
				case 0:
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:360: lines 360-364
					if ($_g->params[0] === null) {
						#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:361: characters 17-41
						return ParseStep::Done($this->header = null);
					} else {
						#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:363: characters 17-32
						$this->header = $_g->params[0];
						#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:364: characters 17-27
						return ParseStep::Progressed();
					}
					break;
				case 1:
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:366: characters 17-26
					return ParseStep::Failed($_g->params[0]);
					break;
			}
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:369: characters 13-52
			$_this = $this->fields;
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:369: characters 13-52
			$x = HeaderField::ofString($line);
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:369: characters 13-52
			$_this->arr[$_this->length] = $x;
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:369: characters 13-52
			++$_this->length;

			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:370: characters 13-23
			return ParseStep::Progressed();
		}
	}


	/**
	 * @param int $c
	 * 
	 * @return ParseStep
	 */
	public function read ($c) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:311: characters 15-19
		$_g = $this->last;
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:311: characters 21-22
		switch ($c) {
			case -1:
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:314: characters 11-21
				return $this->nextLine();
				break;
			case 10:
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:311: characters 15-19
				if ($_g === 13) {
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:318: characters 11-21
					return $this->nextLine();
				} else {
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:339: characters 11-23
					$this->last = $c;
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:340: characters 11-29
					$_this = $this->buf;
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:340: characters 11-29
					$_this->b = ($_this->b??'null') . (chr($c)??'null');

					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:341: characters 11-21
					return ParseStep::Progressed();
				}
				break;
			case 13:
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:311: characters 15-19
				if ($_g === 13) {
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:322: characters 11-28
					$_this1 = $this->buf;
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:322: characters 11-28
					$_this1->b = ($_this1->b??'null') . (chr($this->last)??'null');

					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:323: characters 11-21
					return ParseStep::Progressed();
				} else {
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:334: characters 11-27
					$this->last = 13;
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:335: characters 11-21
					return ParseStep::Progressed();
				}
				break;
			default:
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:311: characters 15-19
				if ($_g === 13) {
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:327: characters 11-28
					$_this2 = $this->buf;
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:327: characters 11-28
					$_this2->b = ($_this2->b??'null') . (chr($this->last)??'null');

					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:328: characters 11-29
					$_this3 = $this->buf;
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:328: characters 11-29
					$_this3->b = ($_this3->b??'null') . (chr($c)??'null');

					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:329: characters 11-20
					$this->last = -1;
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:330: characters 11-21
					return ParseStep::Progressed();
				} else {
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:339: characters 11-23
					$this->last = $c;
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:340: characters 11-29
					$_this4 = $this->buf;
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:340: characters 11-29
					$_this4->b = ($_this4->b??'null') . (chr($c)??'null');

					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:341: characters 11-21
					return ParseStep::Progressed();
				}
				break;
		}
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$INVALID = ParseStep::Failed(new TypedError(422, "Invalid HTTP header", new HxAnon([
	"fileName" => "tink/http/Header.hx",
	"lineNumber" => 307,
	"className" => "tink.http.HeaderParser",
	"methodName" => "INVALID",
])));
	}
}


Boot::registerClass(HeaderParser::class, 'tink.http.HeaderParser');
HeaderParser::__hx__init();
