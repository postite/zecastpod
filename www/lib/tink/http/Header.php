<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\http;

use \php\_Boot\HxClosure;
use \tink\core\OutcomeTools;
use \tink\http\_Header\HeaderValue_Impl_;
use \tink\core\Outcome;
use \php\Boot;
use \tink\core\TypedError;
use \php\_Boot\HxAnon;

class Header {
	/**
	 * @var \Array_hx
	 */
	public $fields;


	/**
	 * @param \Array_hx $fields
	 * 
	 * @return void
	 */
	public function __construct ($fields = null) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:70: lines 70-73
		$this->fields = ($fields === null ? new \Array_hx() : $fields);
	}


	/**
	 * @param string $type
	 * 
	 * @return Outcome
	 */
	public function accepts ($type) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:126: characters 5-37
		$prefix = (\Array_hx::wrap(explode("/", $type))->arr[0] ?? null);
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:127: lines 127-136
		return OutcomeTools::map($this->byName("accept"), function ($v)  use (&$prefix, &$type) {
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:128: lines 128-134
			$_g = 0;
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:128: lines 128-134
			$_g1 = HeaderValue_Impl_::parse($v);
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:128: lines 128-134
			while ($_g < $_g1->length) {
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:128: characters 11-16
				$entry = ($_g1->arr[$_g] ?? null);
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:128: lines 128-134
				$_g = $_g + 1;
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:129: characters 9-68
				if (($entry->value === "*/*") || ($entry->value === $type)) {
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:129: characters 57-68
					return true;
				}
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:130: characters 16-38
				$_g2 = \Array_hx::wrap(explode("/", $entry->value));
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:130: characters 16-38
				if ($_g2->length === 2) {
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:130: characters 16-38
					if (($_g2->arr[1] ?? null) === "*") {
						#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:131: lines 131-132
						if ($prefix === ($_g2->arr[0] ?? null)) {
							#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:131: characters 42-53
							return true;
						}
					}
				}

			}

			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:135: characters 7-19
			return false;
		});
	}


	/**
	 *  Get a header
	 *  @param name - Header name to retrieve
	 *  @return `Success(header)` if there is exactly one entry of the given header name, `Failure(err)` otherwise
	 * 
	 * @param string $name
	 * 
	 * @return Outcome
	 */
	public function byName ($name) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:89: characters 19-28
		$_g = $this->get($name);
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:89: characters 19-28
		switch ($_g->length) {
			case 0:
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:91: characters 9-70
				return Outcome::Failure(new TypedError(422, "No " . ($name??'null') . " header found", new HxAnon([
					"fileName" => "tink/http/Header.hx",
					"lineNumber" => 91,
					"className" => "tink.http.Header",
					"methodName" => "byName",
				])));
				break;
			case 1:
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:93: characters 9-19
				return Outcome::Success(($_g->arr[0] ?? null));
				break;
			default:
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:95: characters 9-85
				return Outcome::Failure(new TypedError(422, "Multiple entries for " . ($name??'null') . " header", new HxAnon([
					"fileName" => "tink/http/Header.hx",
					"lineNumber" => 95,
					"className" => "tink.http.Header",
					"methodName" => "byName",
				])));
				break;
		}
	}


	/**
	 *  Clone this header with additional header fields
	 *  @param fields - Header fields to be added
	 *  @return Header with additional fields
	 * 
	 * @param \Array_hx $fields
	 * 
	 * @return Header
	 */
	public function concat ($fields) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:113: characters 5-50
		return new Header($this->fields->concat($fields));
	}


	/**
	 *  Get the content type header
	 * 
	 * @return Outcome
	 */
	public function contentType () {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:102: characters 5-58
		return OutcomeTools::map($this->byName("content-type"), new HxClosure(ContentType::class, 'ofString'));
	}


	/**
	 *  Get all headers of the given name
	 *  @param name - Header name to retrieve
	 *  @return Array of headers of the given name
	 * 
	 * @param string $name
	 * 
	 * @return \Array_hx
	 */
	public function get ($name) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:81: characters 12-59
		$_g = new \Array_hx();
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:81: characters 13-58
		$_g1 = 0;
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:81: characters 13-58
		$_g2 = $this->fields;
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:81: characters 13-58
		while ($_g1 < $_g2->length) {
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:81: characters 18-19
			$f = ($_g2->arr[$_g1] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:81: characters 13-58
			$_g1 = $_g1 + 1;
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:81: characters 31-58
			if ($f->name === $name) {
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:81: characters 51-58
				$_g->arr[$_g->length] = $f->value;
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:81: characters 51-58
				++$_g->length;
			}
		}

		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:81: characters 12-59
		return $_g;
	}


	/**
	 *  Get content length. Assumes zero if content-length header is missing
	 * 
	 * @return Outcome
	 */
	public function getContentLength () {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:119: characters 19-41
		$_g = $this->byName("content-length");
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:119: characters 19-41
		switch ($_g->index) {
			case 0:
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:121: characters 20-35
				$_hx_tmp = null;
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:120: lines 120-121
				if (\Std::parseInt($_g->params[0]) === null) {
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:120: characters 46-118
					return Outcome::Failure(new TypedError(422, "Invalid Content-Length Header", new HxAnon([
						"fileName" => "tink/http/Header.hx",
						"lineNumber" => 120,
						"className" => "tink.http.Header",
						"methodName" => "getContentLength",
					])));
				} else {
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:121: characters 20-35
					$_hx_tmp = \Std::parseInt($_g->params[0]);
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:121: characters 43-53
					return Outcome::Success($_hx_tmp);
				}
				break;
			case 1:
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:122: characters 24-34
				return Outcome::Failure($_g->params[0]);
				break;
		}
	}


	/**
	 * @return string
	 */
	public function get_LINEBREAK () {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:140: characters 37-50
		return "\x0D\x0A";
	}


	/**
	 * @param string $name
	 * 
	 * @return string
	 */
	public function headerNotFound ($name) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:146: characters 5-35
		return "No " . ($name??'null') . " header found";
	}


	/**
	 * @return object
	 */
	public function iterator () {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:105: characters 5-29
		return $this->fields->iterator();
	}


	/**
	 * @return string
	 */
	public function toString () {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:143: characters 12-44
		$_g = new \Array_hx();
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:143: characters 13-43
		$_g1 = 0;
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:143: characters 13-43
		$_g2 = $this->fields;
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:143: characters 13-43
		while ($_g1 < $_g2->length) {
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:143: characters 18-19
			$f = ($_g2->arr[$_g1] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:143: characters 13-43
			$_g1 = $_g1 + 1;
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:143: characters 31-43
			$_g->arr[$_g->length] = $f->toString();
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:143: characters 31-43
			++$_g->length;

		}

		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/Header.hx:143: characters 5-84
		return ($_g->join("\x0D\x0A")??'null') . "\x0D\x0A" . "\x0D\x0A";
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(Header::class, 'tink.http.Header');
Boot::registerGetters('tink\\http\\Header', [
	'LINEBREAK' => true
]);
