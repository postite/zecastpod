<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\http\_StructuredBody;

use \tink\core\Outcome;
use \php\Boot;
use \tink\core\TypedError;
use \haxe\io\Bytes;
use \tink\chunk\ByteChunk;
use \tink\core\Noise;
use \sys\io\File;
use \tink\io\_Sink\SinkYielding_Impl_;
use \tink\io\_Source\Source_Impl_;
use \php\_Boot\HxAnon;

final class UploadedFile_Impl_ {
	/**
	 * @param string $name
	 * @param string $type
	 * @param Bytes $data
	 * 
	 * @return object
	 */
	static public function ofBlob ($name, $type, $data) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/StructuredBody.hx:19: lines 19-41
		return new HxAnon([
			"fileName" => $name,
			"mimeType" => $type,
			"size" => $data->length,
			"read" => function ()  use (&$data) {
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/StructuredBody.hx:23: characters 35-46
				return Source_Impl_::ofChunk(ByteChunk::of($data));
			},
			"saveTo" => function ($path)  use (&$data) {
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/StructuredBody.hx:26: lines 26-34
				$dest = SinkYielding_Impl_::ofOutput("File sink " . ($path??'null'), File::write($path));
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/StructuredBody.hx:35: lines 35-39
				return Source_Impl_::pipeTo(Source_Impl_::ofChunk(ByteChunk::of($data)), $dest, new HxAnon(["end" => true]))->map(function ($r) {
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/StructuredBody.hx:35: lines 35-39
					switch ($r->index) {
						case 0:
							#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/StructuredBody.hx:36: characters 28-42
							return Outcome::Success(Noise::Noise());
							break;
						case 1:
							#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/StructuredBody.hx:37: characters 33-85
							return Outcome::Failure(new TypedError(null, "File \$path closed unexpectedly", new HxAnon([
								"fileName" => "tink/http/StructuredBody.hx",
								"lineNumber" => 37,
								"className" => "tink.http._StructuredBody.UploadedFile_Impl_",
								"methodName" => "ofBlob",
							])));
							break;
						case 2:
							#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/403eb075dff5d7b8ec4a9e08052eb01e1e196722/src/tink/http/StructuredBody.hx:38: characters 34-44
							return Outcome::Failure($r->params[0]);
							break;
					}
				})->gather();
			},
		]);
	}
}


Boot::registerClass(UploadedFile_Impl_::class, 'tink.http._StructuredBody.UploadedFile_Impl_');
