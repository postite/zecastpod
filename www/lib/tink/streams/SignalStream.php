<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\streams;

use \tink\core\_Signal\Signal_Impl_;
use \tink\core\SignalObject;
use \php\Boot;

class SignalStream extends Generator {
	/**
	 * @param SignalObject $signal
	 * 
	 * @return void
	 */
	public function __construct ($signal) {
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:721: lines 721-725
		parent::__construct(Signal_Impl_::nextTime($signal)->map(function ($o)  use (&$signal) {
			#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:721: lines 721-725
			switch ($o->index) {
				case 0:
					#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:722: characters 21-57
					return Step::Link($o->params[0], new SignalStream($signal));
					break;
				case 1:
					#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:723: characters 18-25
					return Step::Fail($o->params[0]);
					break;
				case 2:
					#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:724: characters 14-17
					return Step::End();
					break;
			}
		})->gather());
	}
}


Boot::registerClass(SignalStream::class, 'tink.streams.SignalStream');
