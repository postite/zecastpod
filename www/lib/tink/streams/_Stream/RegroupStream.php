<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\streams\_Stream;

use \php\_Boot\HxClosure;
use \tink\streams\RegroupStatus;
use \php\Boot;
use \tink\streams\StreamObject;
use \tink\streams\Empty_hx;
use \tink\core\_Lazy\LazyFunc;
use \tink\streams\Handled;

class RegroupStream extends CompoundStream {
	/**
	 * @param StreamObject $source
	 * @param object $f
	 * @param StreamObject $prev
	 * 
	 * @return void
	 */
	public function __construct ($source, $f, $prev = null) {
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:98: characters 5-41
		if ($prev === null) {
			#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:98: characters 22-41
			$prev = Empty_hx::$inst;
		}
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:100: characters 5-20
		$ret = null;
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:101: characters 5-28
		$terminated = false;
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:102: characters 5-18
		$buf = new \Array_hx();
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:134: characters 5-24
		parent::__construct(\Array_hx::wrap([
			$prev,
			Stream_Impl_::flatten($source->forEach(Handler_Impl_::ofUnknown(function ($item)  use (&$terminated, &$f, &$buf, &$ret) {
				#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:104: characters 7-21
				$buf->arr[$buf->length] = $item;
				#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:104: characters 7-21
				++$buf->length;

				#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:105: lines 105-117
				return $f->apply($buf, RegroupStatus::Flowing())->map(function ($o)  use (&$terminated, &$ret) {
					#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:105: lines 105-117
					switch ($o->index) {
						case 0:
							#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:107: characters 11-18
							$ret = $o->params[0];
							#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:108: characters 11-17
							return Handled::Finish();
							break;
						case 1:
							#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:109: characters 25-26
							$v = $o->params[0];
							#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:110: characters 17-33
							$ret = ($v->index === 0 ? $v->params[0] : (new LazyFunc(new HxClosure(Empty_hx::class, 'make')))->get());
							#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:111: characters 11-28
							$terminated = true;
							#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:112: characters 11-17
							return Handled::Finish();
							break;
						case 2:
							#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:114: characters 11-17
							return Handled::Resume();
							break;
						case 3:
							#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:116: characters 11-18
							return Handled::Clog($o->params[0]);
							break;
					}
				})->gather();
			}))->map(function ($o1)  use (&$terminated, &$f, &$buf, &$ret) {
				#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:118: lines 118-131
				switch ($o1->index) {
					case 0:
						#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:128: lines 128-129
						if ($terminated) {
							#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:128: characters 38-41
							return $ret;
						} else {
							#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:129: characters 26-57
							return new RegroupStream($o1->params[0], $f, $ret);
						}
						break;
					case 1:
						#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:130: characters 30-66
						return new CloggedStream(Stream_Impl_::ofError($o1->params[0]), $o1->params[1]);
						break;
					case 2:
						#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:119: characters 23-40
						return Stream_Impl_::ofError($o1->params[0]);
						break;
					case 3:
						#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:120: lines 120-127
						if ($buf->length === 0) {
							#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:120: characters 42-54
							return Empty_hx::$inst;
						} else {
							#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:122: lines 122-127
							return Stream_Impl_::flatten($f->apply($buf, RegroupStatus::Ended())->map(function ($o2) {
								#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:122: lines 122-127
								switch ($o2->index) {
									case 0:
										#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:123: characters 30-31
										return $o2->params[0];
										break;
									case 1:
										#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:124: characters 27-28
										$v1 = $o2->params[0];
										#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:124: characters 31-47
										if ($v1->index === 0) {
											#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:124: characters 31-47
											return $v1->params[0];
										} else {
											#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:124: characters 31-47
											return (new LazyFunc(new HxClosure(Empty_hx::class, 'make')))->get();
										}
										break;
									case 2:
										#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:125: characters 27-39
										return Empty_hx::$inst;
										break;
									case 3:
										#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:126: characters 28-50
										return Stream_Impl_::ofError($o2->params[0]);
										break;
								}
							})->gather());
						}
						break;
				}
			})->gather()),
		]));
	}
}


Boot::registerClass(RegroupStream::class, 'tink.streams._Stream.RegroupStream');
