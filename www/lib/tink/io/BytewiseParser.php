<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\io;

use \tink\core\Outcome;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\TypedError;
use \tink\chunk\ChunkCursor;
use \php\_Boot\HxAnon;

class BytewiseParser implements StreamParserObject {
	/**
	 * @param ChunkCursor $rest
	 * 
	 * @return Outcome
	 */
	public function eof ($rest) {
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/StreamParser.hx:179: characters 19-28
		$_g = $this->read(-1);
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/StreamParser.hx:179: characters 19-28
		switch ($_g->index) {
			case 0:
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/StreamParser.hx:180: characters 24-90
				return Outcome::Failure(new TypedError(422, "Unexpected end of input", new HxAnon([
					"fileName" => "tink/io/StreamParser.hx",
					"lineNumber" => 180,
					"className" => "tink.io.BytewiseParser",
					"methodName" => "eof",
				])));
				break;
			case 1:
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/StreamParser.hx:181: characters 21-31
				return Outcome::Success($_g->params[0]);
				break;
			case 2:
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/StreamParser.hx:182: characters 23-33
				return Outcome::Failure($_g->params[0]);
				break;
		}
	}


	/**
	 * @param ChunkCursor $cursor
	 * 
	 * @return ParseStep
	 */
	public function progress ($cursor) {
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/StreamParser.hx:166: lines 166-173
		while (true) {
			#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/StreamParser.hx:166: characters 15-39
			$_g = $this->read($cursor->currentByte);
			#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/StreamParser.hx:166: characters 15-39
			switch ($_g->index) {
				case 0:
										break;
				case 1:
					#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/StreamParser.hx:169: characters 9-22
					$cursor->next();
					#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/StreamParser.hx:170: characters 9-23
					return ParseStep::Done($_g->params[0]);
					break;
				case 2:
					#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/StreamParser.hx:172: characters 9-25
					return ParseStep::Failed($_g->params[0]);
					break;
			}

			#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/StreamParser.hx:166: lines 166-173
			if (!$cursor->next()) {
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/StreamParser.hx:166: lines 166-173
				break;
			}
		}
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/StreamParser.hx:175: characters 5-22
		return ParseStep::Progressed();
	}


	/**
	 * @param int $char
	 * 
	 * @return ParseStep
	 */
	public function read ($char) {
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/StreamParser.hx:161: characters 12-17
		throw new HxException("abstract");
	}
}


Boot::registerClass(BytewiseParser::class, 'tink.io.BytewiseParser');
