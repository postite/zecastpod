<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\io\_Sink;

use \tink\core\_Promise\Promise_Impl_;
use \tink\core\Outcome;
use \haxe\io\Output;
use \php\Boot;
use \tink\io\_Worker\Worker_Impl_;
use \tink\io\SinkObject;
use \tink\core\TypedError;
use \tink\core\_Future\FutureObject;
use \tink\io\std\OutputSink;
use \tink\io\_Source\Source_Impl_;
use \php\_Boot\HxAnon;

final class SinkYielding_Impl_ {
	/**
	 * @var SinkObject
	 */
	static public $BLACKHOLE;


	/**
	 * @param SinkObject $this
	 * 
	 * @return SinkObject
	 */
	static public function dirty ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:30: characters 5-21
		return $this1;
	}


	/**
	 * @param SinkObject $this
	 * 
	 * @return FutureObject
	 */
	static public function end ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:23: lines 23-27
		if ($this1->get_sealed()) {
			#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:23: characters 24-29
			return Promise_Impl_::ofOutcome(Outcome::Success(false));
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:24: lines 24-27
			return $this1->consume(Source_Impl_::$EMPTY, new HxAnon(["end" => true]))->map(function ($r) {
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:24: lines 24-27
				switch ($r->index) {
					case 0:
					case 1:
						#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:25: characters 41-54
						return Outcome::Success(true);
						break;
					case 2:
						#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:26: characters 32-42
						return Outcome::Failure($r->params[0]);
						break;
				}
			})->gather();
		}
	}


	/**
	 * @param TypedError $e
	 * 
	 * @return SinkObject
	 */
	static public function ofError ($e) {
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:33: characters 5-28
		return new ErrorSink($e);
	}


	/**
	 * @param string $name
	 * @param Output $target
	 * @param object $options
	 * 
	 * @return SinkObject
	 */
	static public function ofOutput ($name, $target, $options = null) {
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:52: lines 52-55
		return new OutputSink($name, $target, ($options === null ? Worker_Impl_::get() : ($options->worker === null ? Worker_Impl_::get() : $options->worker)));
	}


	/**
	 * @param FutureObject $p
	 * 
	 * @return SinkObject
	 */
	static public function ofPromised ($p) {
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:36: lines 36-39
		return new FutureSink($p->map(function ($o) {
			#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:36: lines 36-39
			switch ($o->index) {
				case 0:
					#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:37: characters 24-25
					return $o->params[0];
					break;
				case 1:
					#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:38: characters 24-34
					return SinkYielding_Impl_::ofError($o->params[0]);
					break;
			}
		})->gather());
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$BLACKHOLE = Blackhole::$inst;
	}
}


Boot::registerClass(SinkYielding_Impl_::class, 'tink.io._Sink.SinkYielding_Impl_');
SinkYielding_Impl_::__hx__init();
