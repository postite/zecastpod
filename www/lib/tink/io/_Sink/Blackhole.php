<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\io\_Sink;

use \tink\streams\_Stream\Handler_Impl_;
use \php\Boot;
use \php\_Boot\HxException;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \tink\io\PipeResult;
use \tink\streams\StreamObject;
use \tink\io\SinkBase;
use \tink\core\_Lazy\LazyConst;
use \tink\streams\Handled;

class Blackhole extends SinkBase {
	/**
	 * @var Blackhole
	 */
	static public $inst;


	/**
	 * @return void
	 */
	public function __construct () {
	}


	/**
	 * @param StreamObject $source
	 * @param object $options
	 * 
	 * @return FutureObject
	 */
	public function consume ($source, $options) {
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:66: lines 66-70
		return $source->forEach(Handler_Impl_::ofSafe(function ($_) {
			#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:66: characters 39-52
			return new SyncFuture(new LazyConst(Handled::Resume()));
		}))->map(function ($o) {
			#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:66: lines 66-70
			switch ($o->index) {
				case 0:
					#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:68: characters 23-28
					throw new HxException("unreachable");
					break;
				case 2:
					#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:69: characters 23-38
					return PipeResult::SourceFailed($o->params[0]);
					break;
				case 3:
					#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Sink.hx:67: characters 22-32
					return PipeResult::AllWritten();
					break;
			}
		})->gather();
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$inst = new Blackhole();
	}
}


Boot::registerClass(Blackhole::class, 'tink.io._Sink.Blackhole');
Blackhole::__hx__init();
