<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\multipart\parsers;

use \tink\core\_Promise\Promise_Impl_;
use \tink\core\OutcomeTools;
use \tink\streams\_Stream\Stream_Impl_;
use \tink\http\_Header\HeaderValue_Impl_;
use \tink\core\Outcome;
use \tink\http\Header;
use \tink\chunk\ChunkObject;
use \tink\http\HeaderField;
use \php\Boot;
use \tink\http\_StructuredBody\UploadedFile_Impl_;
use \tink\core\_Future\FutureObject;
use \tink\multipart\Parser;
use \tink\streams\Generator;
use \tink\streams\Step;
use \haxe\io\Bytes;
use \tink\streams\StreamObject;
use \tink\http\_Header\HeaderName_Impl_;
use \tink\_Chunk\Chunk_Impl_;
use \haxe\io\_BytesData\Container;
use \tink\core\NamedWith;
use \tink\http\HeaderParser;
use \tink\io\IdealSourceTools;
use \php\_Boot\HxAnon;
use \haxe\ds\Option;
use \tink\http\BodyPart;

class TinkParser implements Parser {
	/**
	 * @var string
	 */
	public $boundary;


	/**
	 * @param string $boundary
	 * 
	 * @return void
	 */
	public function __construct ($boundary) {
		#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:20: characters 3-27
		$this->boundary = $boundary;
	}


	/**
	 * @param StreamObject $s
	 * @param ChunkObject $delim
	 * 
	 * @return FutureObject
	 */
	public function getChunk ($s, $delim) {
		#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:93: characters 3-30
		$split = IdealSourceTools::split($s, $delim);
		#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:94: lines 94-109
		return Promise_Impl_::next(IdealSourceTools::parse($split->before, new HeaderParser(function ($line, $fields) {
			#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:97: lines 97-101
			$tmp = null;
			#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:97: lines 97-101
			if ($line === "--") {
				#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:97: lines 97-101
				$tmp = null;
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:99: characters 7-46
				$x = HeaderField::ofString($line);
				#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:99: characters 7-46
				$fields->arr[$fields->length] = $x;
				#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:99: characters 7-46
				++$fields->length;

				#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:97: lines 97-101
				$tmp = new Header($fields);
			}
			#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:95: lines 95-102
			return Outcome::Success($tmp);
		})), function ($o)  use (&$split) {
			#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:104: lines 104-108
			if ($o->a === null) {
				#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:104: characters 21-25
				return Promise_Impl_::ofOutcome(Outcome::Success(Option::None()));
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:105: lines 105-108
				return Promise_Impl_::ofOutcome(Outcome::Success(Option::Some(new HxAnon([
					"chunk" => $o,
					"rest" => $split->after,
				]))));
			}
		});
	}


	/**
	 * @param StreamObject $src
	 * 
	 * @return StreamObject
	 */
	public function parse ($src) {
		#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:23: lines 23-90
		$_gthis = $this;
		#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:25: characters 26-37
		$s = "--" . ($this->boundary??'null');
		#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:25: characters 3-40
		$split = IdealSourceTools::split($src, Chunk_Impl_::ofBytes(new Bytes(strlen($s), new Container($s))));
		#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:89: characters 3-60
		return Stream_Impl_::promise(Promise_Impl_::next($split->delimiter, function ($_)  use (&$split, &$_gthis) {
			#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:28: characters 4-24
			$s1 = $split->after;
			#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:29: characters 4-45
			$s2 = "\x0D\x0A--" . ($_gthis->boundary??'null');
			#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:29: characters 4-45
			$delim = Chunk_Impl_::ofBytes(new Bytes(strlen($s2), new Container($s2)));
			#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:31: lines 31-55
			$next = null;
			#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:31: lines 31-55
			$next = function ($step)  use (&$s1, &$next, &$delim, &$_gthis) {
				#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:32: lines 32-54
				$_gthis->getChunk($s1, $delim)->handle(function ($o)  use (&$step, &$s1, &$next) {
					#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:32: lines 32-54
					switch ($o->index) {
						case 0:
							#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:32: characters 51-52
							switch ($o->params[0]->index) {
								case 0:
									#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:35: characters 34-39
									$chunk = $o->params[0]->params[0]->chunk;
									#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:36: characters 7-15
									$s1 = $o->params[0]->params[0]->rest;
									#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:37: characters 14-51
									$_g = $chunk->a->byName(HeaderName_Impl_::ofString("content-disposition"));
									#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:37: characters 14-51
									switch ($_g->index) {
										case 0:
											#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:38: characters 21-22
											$v = $_g->params[0];
											#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:39: lines 39-48
											IdealSourceTools::all($chunk->b)->handle(function ($bytes)  use (&$step, &$next, &$chunk, &$v) {
												#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:40: characters 10-37
												$ext = HeaderValue_Impl_::getExtension($v);
												#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:42: characters 11-22
												$next1 = ($ext->data["name"] ?? null);
												#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:43: characters 18-33
												$_g1 = ($ext->data["filename"] ?? null);
												#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:41: lines 41-47
												$next2 = new NamedWith($next1, ($_g1 === null ? BodyPart::Value($bytes->toString()) : BodyPart::File(UploadedFile_Impl_::ofBlob($_g1, OutcomeTools::orNull($chunk->a->byName(HeaderName_Impl_::ofString("content-type"))), $bytes->toBytes()))));
												#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:41: lines 41-47
												$next3 = Step::Link($next2, Generator::stream($next));
												#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:41: lines 41-47
												$step($next3);
											});
											break;
										case 1:
											#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:50: characters 9-22
											$step(Step::Fail($_g->params[0]));
											break;
									}


									break;
								case 1:
									#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:34: characters 7-16
									$step(Step::End());
									break;
							}
							break;
						case 1:
							#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:53: characters 7-20
							$step(Step::Fail($o->params[0]));
							break;
					}
				});
			};
			#/Users/ut/haxe/haxe_libraries/tink_multipart/0.3.0/haxelib/src/tink/multipart/parsers/TinkParser.hx:56: characters 4-17
			return Promise_Impl_::ofOutcome(Outcome::Success(Generator::stream($next)));
		}));
	}
}


Boot::registerClass(TinkParser::class, 'tink.multipart.parsers.TinkParser');
