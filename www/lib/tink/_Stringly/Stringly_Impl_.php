<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\_Stringly;

use \tink\core\OutcomeTools;
use \tink\core\Outcome;
use \php\Boot;
use \tink\core\TypedError;
use \php\_Boot\HxAnon;

final class Stringly_Impl_ {
	/**
	 * @var \EReg
	 */
	static public $SUPPORTED_DATE_REGEX;


	/**
	 * @param string $s
	 * @param bool $allowFloat
	 * 
	 * @return bool
	 */
	static public function isNumber ($s, $allowFloat) {
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:10: characters 5-36
		if (strlen($s) === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:10: characters 24-36
			return false;
		}
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:12: lines 12-13
		$pos = 0;
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:12: lines 12-13
		$max = strlen($s);
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:26: characters 5-20
		if ((0 < $max) && (((strlen($s) === 0 ? 0 : ord($s[0]))) === 45)) {
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:26: characters 5-20
			$pos = 1;
		}
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:28: lines 28-31
		if (!$allowFloat) {
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:29: characters 11-26
			$tmp = null;
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:29: characters 11-26
			if (($pos < $max) && (((strlen($s) === $pos ? 0 : ord($s[$pos]))) === 48)) {
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:29: characters 11-26
				$pos = $pos + 1;
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:29: characters 11-26
				$tmp = ($pos - 1) > -1;
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:29: characters 11-26
				$tmp = false;
			}
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:29: lines 29-30
			if ($tmp) {
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:30: characters 9-24
				if (($pos < $max) && (((strlen($s) === $pos ? 0 : ord($s[$pos]))) === 120)) {
					#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:30: characters 9-24
					$pos = $pos + 1;
				}
			}
		}
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:33: characters 5-13
		while (($pos < $max) && ((((strlen($s) === $pos ? 0 : ord($s[$pos]))) ^ 48) < 10)) {
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:33: characters 5-13
			$pos = $pos + 1;
		}
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:35: lines 35-43
		if ($allowFloat && ($pos < $max)) {
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:36: characters 11-26
			$tmp1 = null;
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:36: characters 11-26
			if (($pos < $max) && (((strlen($s) === $pos ? 0 : ord($s[$pos]))) === 46)) {
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:36: characters 11-26
				$pos = $pos + 1;
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:36: characters 11-26
				$tmp1 = ($pos - 1) > -1;
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:36: characters 11-26
				$tmp1 = false;
			}
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:36: lines 36-37
			if ($tmp1) {
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:37: characters 9-17
				while (($pos < $max) && ((((strlen($s) === $pos ? 0 : ord($s[$pos]))) ^ 48) < 10)) {
					#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:37: characters 9-17
					$pos = $pos + 1;
				}
			}
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:39: characters 11-45
			$tmp2 = null;
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:39: characters 11-26
			$tmp3 = null;
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:39: characters 11-26
			if (($pos < $max) && (((strlen($s) === $pos ? 0 : ord($s[$pos]))) === 101)) {
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:39: characters 11-26
				$pos = $pos + 1;
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:39: characters 11-26
				$tmp3 = ($pos - 1) > -1;
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:39: characters 11-26
				$tmp3 = false;
			}
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:39: characters 11-45
			if (!$tmp3) {
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:39: characters 30-45
				if (($pos < $max) && (((strlen($s) === $pos ? 0 : ord($s[$pos]))) === 69)) {
					#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:39: characters 30-45
					$pos = $pos + 1;
					#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:39: characters 11-45
					$tmp2 = ($pos - 1) > -1;
				} else {
					#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:39: characters 11-45
					$tmp2 = false;
				}
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:39: characters 11-45
				$tmp2 = true;
			}
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:39: lines 39-42
			if ($tmp2) {
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:40: characters 9-24
				$tmp4 = null;
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:40: characters 9-24
				if (($pos < $max) && (((strlen($s) === $pos ? 0 : ord($s[$pos]))) === 43)) {
					#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:40: characters 9-24
					$pos = $pos + 1;
					#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:40: characters 9-24
					$tmp4 = ($pos - 1) > -1;
				} else {
					#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:40: characters 9-24
					$tmp4 = false;
				}
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:40: characters 9-43
				if (!$tmp4) {
					#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:40: characters 28-43
					if (($pos < $max) && (((strlen($s) === $pos ? 0 : ord($s[$pos]))) === 45)) {
						#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:40: characters 28-43
						$pos = $pos + 1;
					}
				}
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:41: characters 9-17
				while (($pos < $max) && ((((strlen($s) === $pos ? 0 : ord($s[$pos]))) ^ 48) < 10)) {
					#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:41: characters 9-17
					$pos = $pos + 1;
				}
			}
		}
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:45: characters 5-22
		return $pos === $max;
	}


	/**
	 * @param bool $b
	 * 
	 * @return string
	 */
	static public function ofBool ($b) {
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:158: characters 12-38
		if ($b) {
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:158: characters 20-24
			return "true";
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:158: characters 32-37
			return "false";
		}
	}


	/**
	 * @param \Date $d
	 * 
	 * @return string
	 */
	static public function ofDate ($d) {
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:167: characters 5-32
		return Stringly_Impl_::ofFloat($d->getTime());
	}


	/**
	 * @param float $f
	 * 
	 * @return string
	 */
	static public function ofFloat ($f) {
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:164: characters 5-25
		return \Std::string($f);
	}


	/**
	 * @param int $i
	 * 
	 * @return string
	 */
	static public function ofInt ($i) {
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:161: characters 5-25
		return \Std::string($i);
	}


	/**
	 * @param string $this
	 * @param \Closure $f
	 * 
	 * @return Outcome
	 */
	static public function parse ($this1, $f) {
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:155: characters 12-18
		$f1 = $f;
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:155: characters 12-18
		$a1 = $this1;
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:155: characters 5-42
		return TypedError::catchExceptions(function ()  use (&$f1, &$a1) {
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:155: characters 12-18
			return $f1($a1);
		}, null, new HxAnon([
			"fileName" => "tink/Stringly.hx",
			"lineNumber" => 155,
			"className" => "tink._Stringly.Stringly_Impl_",
			"methodName" => "parse",
		]));
	}


	/**
	 * @param string $this
	 * 
	 * @return Outcome
	 */
	static public function parseDate ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:88: characters 19-31
		$_g = Stringly_Impl_::parseFloat($this1);
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:88: characters 19-31
		switch ($_g->index) {
			case 0:
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:89: characters 20-21
				$f = $_g->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:90: characters 9-34
				return Outcome::Success(\Date::fromTime($f));
				break;
			case 1:
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:92: characters 9-60
				if (!Stringly_Impl_::$SUPPORTED_DATE_REGEX->match($this1)) {
					#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:92: characters 47-60
					return Outcome::Failure(new TypedError(422, "" . ($this1??'null') . " is not a valid date", new HxAnon([
						"fileName" => "tink/Stringly.hx",
						"lineNumber" => 92,
						"className" => "tink._Stringly.Stringly_Impl_",
						"methodName" => "parseDate",
					])));
				}
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:110: characters 9-45
				$s = \StringTools::replace($this1, "Z", "+00:00");
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:111: characters 9-157
				$d = \DateTime::createFromFormat((Stringly_Impl_::$SUPPORTED_DATE_REGEX->matched(2) === null ? "Y-m-d\\TH:i:sP" : "Y-m-d\\TH:i:s.uP"), $s, new \DateTimeZone("UTC"));
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:112: characters 9-53
				if (!$d) {
					#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:112: characters 40-53
					return Outcome::Failure(new TypedError(422, "" . ($this1??'null') . " is not a valid date", new HxAnon([
						"fileName" => "tink/Stringly.hx",
						"lineNumber" => 112,
						"className" => "tink._Stringly.Stringly_Impl_",
						"methodName" => "parseDate",
					])));
				}
				#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:113: characters 9-56
				return Outcome::Success(\Date::fromTime($d->getTimestamp() * 1000));
				break;
		}
	}


	/**
	 * @param string $this
	 * 
	 * @return Outcome
	 */
	static public function parseFloat ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:56: characters 19-30
		$_g = trim($this1);
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:57: lines 57-60
		if (Stringly_Impl_::isNumber($_g, true)) {
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:58: characters 9-45
			return Outcome::Success(\Std::parseFloat($_g));
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:60: characters 9-94
			return Outcome::Failure(new TypedError(422, "" . ($_g??'null') . " (encoded as " . ($this1??'null') . ") is not a valid float", new HxAnon([
				"fileName" => "tink/Stringly.hx",
				"lineNumber" => 60,
				"className" => "tink._Stringly.Stringly_Impl_",
				"methodName" => "parseFloat",
			])));
		}
	}


	/**
	 * @param string $this
	 * 
	 * @return Outcome
	 */
	static public function parseInt ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:67: characters 19-30
		$_g = trim($this1);
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:68: lines 68-71
		if (Stringly_Impl_::isNumber($_g, false)) {
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:69: characters 9-41
			return Outcome::Success(\Std::parseInt($_g));
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:71: characters 9-96
			return Outcome::Failure(new TypedError(422, "" . ($_g??'null') . " (encoded as " . ($this1??'null') . ") is not a valid integer", new HxAnon([
				"fileName" => "tink/Stringly.hx",
				"lineNumber" => 71,
				"className" => "tink._Stringly.Stringly_Impl_",
				"methodName" => "parseInt",
			])));
		}
	}


	/**
	 * @param string $this
	 * 
	 * @return bool
	 */
	static public function toBool ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:50: lines 50-53
		if ($this1 !== null) {
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:50: characters 30-55
			switch (strtolower(trim($this1))) {
				case "0":
				case "false":
				case "no":
					#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:51: characters 34-39
					return false;
					break;
				default:
					#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:52: characters 18-22
					return true;
					break;
			}
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:50: lines 50-53
			return false;
		}
	}


	/**
	 * @param string $this
	 * 
	 * @return \Date
	 */
	static public function toDate ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:152: characters 5-30
		return OutcomeTools::sure(Stringly_Impl_::parseDate($this1));
	}


	/**
	 * @param string $this
	 * 
	 * @return float
	 */
	static public function toFloat ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:64: characters 5-31
		return OutcomeTools::sure(Stringly_Impl_::parseFloat($this1));
	}


	/**
	 * @param string $this
	 * 
	 * @return int
	 */
	static public function toInt ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_stringly/0.3.1/haxelib/src/tink/Stringly.hx:75: characters 5-29
		return OutcomeTools::sure(Stringly_Impl_::parseInt($this1));
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$SUPPORTED_DATE_REGEX = new \EReg("^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2})(\\.\\d{3})?(Z|[\\+-]\\d{2}:\\d{2})\$", "");
	}
}


Boot::registerClass(Stringly_Impl_::class, 'tink._Stringly.Stringly_Impl_');
Stringly_Impl_::__hx__init();
