<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\core\_Promise;

use \php\_Boot\HxClosure;
use \tink\core\OutcomeTools;
use \tink\core\Outcome;
use \php\Boot;
use \tink\core\TypedError;
use \tink\core\_Future\FutureObject;
use \tink\core\_Future\SyncFuture;
use \tink\core\MPair;
use \tink\core\_Future\Future_Impl_;
use \tink\core\Noise;
use \tink\core\_Lazy\LazyObject;
use \tink\core\_Callback\CallbackLink_Impl_;
use \tink\core\_Callback\LinkObject;
use \tink\core\_Lazy\LazyConst;

final class Promise_Impl_ {
	/**
	 * @var FutureObject
	 */
	static public $NEVER;
	/**
	 * @var FutureObject
	 */
	static public $NOISE;
	/**
	 * @var FutureObject
	 */
	static public $NULL;


	/**
	 * @param FutureObject $a
	 * @param FutureObject $b
	 * 
	 * @return FutureObject
	 */
	static public function and ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:63: characters 5-61
		return Promise_Impl_::merge($a, $b, function ($a1, $b1) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:63: characters 39-60
			return Promise_Impl_::ofOutcome(Outcome::Success(new MPair($a1, $b1)));
		});
	}


	/**
	 * @param \Closure $gen
	 * 
	 * @return \Closure
	 */
	static public function cache ($gen) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:183: characters 5-18
		$p = null;
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:184: lines 184-201
		return function ()  use (&$gen, &$p) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:185: characters 7-19
			$ret = $p;
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:186: lines 186-196
			if ($ret === null) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:187: characters 9-26
				$sync = false;
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:188: lines 188-194
				$ret = Promise_Impl_::next($gen(), function ($o)  use (&$sync, &$p) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:189: lines 189-192
					$o->b->handle(function ($_)  use (&$sync, &$p) {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:190: characters 13-24
						$sync = true;
						#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:191: characters 13-21
						$p = null;
					});
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:193: characters 11-21
					return Promise_Impl_::ofOutcome(Outcome::Success($o->a));
				});
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:195: characters 9-26
				if (!$sync) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:195: characters 19-26
					$p = $ret;
				}
			}
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:197: lines 197-200
			return $ret->map(function ($o1)  use (&$p) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:198: characters 9-36
				if (!OutcomeTools::isSuccess($o1)) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:198: characters 28-36
					$p = null;
				}
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:199: characters 9-17
				return $o1;
			})->gather();
		};
	}


	/**
	 * @param FutureObject $this
	 * 
	 * @return FutureObject
	 */
	static public function eager ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:12: characters 5-24
		return $this1->eager();
	}


	/**
	 * @param FutureObject $this
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	static public function flatMap ($this1, $f) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:18: characters 12-27
		return $this1->flatMap($f)->gather();
	}


	/**
	 * @param FutureObject $this
	 * @param \Closure $cb
	 * 
	 * @return LinkObject
	 */
	static public function handle ($this1, $cb) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:39: characters 5-27
		return $this1->handle($cb);
	}


	/**
	 * @param \Array_hx $a
	 * @param int $concurrency
	 * @param bool $lazy
	 * 
	 * @return FutureObject
	 */
	static public function inParallel ($a, $concurrency = null, $lazy = null) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:113: lines 113-163
		if ($a->length === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:113: characters 25-49
			return new SyncFuture(new LazyConst(Outcome::Success(new \Array_hx())));
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:114: lines 114-163
			return Future_Impl_::async(function ($cb)  use (&$concurrency, &$a) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:115: lines 115-122
				$result = new \Array_hx();
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:115: lines 115-122
				$pending = $a->length;
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:115: lines 115-122
				$links = null;
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:115: lines 115-122
				$linkArray = new \Array_hx();
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:115: lines 115-122
				$sync = false;
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:115: lines 115-122
				$i = 0;
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:115: lines 115-122
				$iter = $a->iterator();
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:115: lines 115-122
				$next = null;
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:124: lines 124-128
				$done = function ($o)  use (&$sync, &$links, &$cb) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:125: lines 125-126
					if ($links === null) {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:125: characters 30-41
						$sync = true;
					} else if ($links !== null) {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:126: characters 16-30
						$links->cancel();
					}
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:127: characters 11-16
					$cb($o);
				};
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:130: lines 130-133
				$fail = function ($e)  use (&$pending, &$done) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:131: characters 11-22
					$pending = 0;
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:132: characters 11-27
					$done(Outcome::Failure($e));
				};
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:139: lines 139-145
				$set = function ($index, $value)  use (&$next, &$pending, &$iter, &$result, &$done) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:140: characters 11-32
					$result[$index] = $value;
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:141: characters 15-24
					$pending = $pending - 1;
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:141: lines 141-144
					if ($pending === 0) {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:142: characters 13-34
						$done(Outcome::Success($result));
					} else if ($iter->hasNext() && ($pending > 0)) {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:144: characters 13-19
						$next();
					}
				};
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:147: lines 147-153
				$next = function ()  use (&$set, &$fail, &$iter, &$i, &$linkArray) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:148: characters 23-26
					$i = $i + 1;
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:148: characters 11-27
					$index1 = $i - 1;
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:149: lines 149-152
					$x = $iter->next()->handle(function ($o1)  use (&$set, &$fail, &$index1) {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:149: lines 149-152
						switch ($o1->index) {
							case 0:
								#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:150: characters 30-43
								$set($index1, $o1->params[0]);
								break;
							case 1:
								#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:151: characters 30-37
								$fail($o1->params[0]);
								break;
						}
					});
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:149: lines 149-152
					$linkArray->arr[$linkArray->length] = $x;
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:149: lines 149-152
					++$linkArray->length;

				};
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:155: lines 155-157
				while (true) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:155: characters 15-70
					$tmp = null;
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:155: characters 15-70
					if ($iter->hasNext() && ($pending > 0)) {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:155: characters 28-70
						if ($concurrency !== null) {
							#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:155: characters 52-65
							$concurrency = $concurrency - 1;
							#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:155: characters 15-70
							$tmp = ($concurrency + 1) > 0;
						} else {
							#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:155: characters 15-70
							$tmp = true;
						}
					} else {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:155: characters 15-70
						$tmp = false;
					}
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:155: lines 155-157
					if (!$tmp) {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:155: lines 155-157
						break;
					}
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:156: characters 11-17
					$next();
				}
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:159: characters 9-26
				$links = CallbackLink_Impl_::fromMany($linkArray);
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:161: lines 161-162
				if ($sync) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:162: characters 11-25
					if ($links !== null) {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:162: characters 11-25
						$links->cancel();
					}
				}
			}, $lazy);
		}
	}


	/**
	 * @param \Array_hx $a
	 * 
	 * @return FutureObject
	 */
	static public function inSequence ($a) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:167: lines 167-175
		$loop = null;
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:167: lines 167-175
		$loop = function ($index)  use (&$loop, &$a) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:169: lines 169-175
			if ($index === $a->length) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:169: characters 32-34
				return Promise_Impl_::ofOutcome(Outcome::Success(new \Array_hx()));
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:171: lines 171-175
				return Promise_Impl_::next(($a->arr[$index] ?? null), function ($head)  use (&$index, &$loop) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:172: lines 172-174
					return Promise_Impl_::next($loop($index + 1), function ($tail)  use (&$head) {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:173: characters 31-57
						return Promise_Impl_::ofOutcome(Outcome::Success((\Array_hx::wrap([$head]))->concat($tail)));
					});
				});
			}
		};
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:178: characters 5-19
		return $loop(0);
	}


	/**
	 * @param FutureObject $this
	 * 
	 * @return FutureObject
	 */
	static public function isSuccess ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:45: characters 12-55
		return $this1->map(function ($o) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:45: characters 34-54
			return OutcomeTools::isSuccess($o);
		})->gather();
	}


	/**
	 * @param object $promises
	 * @param \Closure $yield
	 * @param FutureObject $finally
	 * @param bool $lazy
	 * 
	 * @return FutureObject
	 */
	static public function iterate ($promises, $yield, $finally, $lazy = null) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:67: lines 67-85
		return Future_Impl_::async(function ($cb)  use (&$yield, &$finally, &$promises) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:68: characters 7-38
			$iter = $promises->iterator();
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:69: lines 69-83
			$next = null;
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:69: lines 69-83
			$next = function ()  use (&$yield, &$next, &$iter, &$finally, &$cb) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:70: lines 70-82
				if ($iter->hasNext()) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:71: lines 71-80
					$iter->next()->handle(function ($o)  use (&$yield, &$next, &$cb) {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:71: lines 71-80
						switch ($o->index) {
							case 0:
								#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:73: lines 73-77
								$yield($o->params[0])->handle(function ($o1)  use (&$next, &$cb) {
									#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:73: lines 73-77
									switch ($o1->index) {
										case 0:
											#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:73: characters 50-51
											switch ($o1->params[0]->index) {
												case 0:
													#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:74: characters 42-58
													$cb(Outcome::Success($o1->params[0]->params[0]));
													break;
												case 1:
													#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:75: characters 37-43
													$next();
													break;
											}
											break;
										case 1:
											#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:76: characters 34-48
											$cb(Outcome::Failure($o1->params[0]));
											break;
									}
								});
								break;
							case 1:
								#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:79: characters 15-29
								$cb(Outcome::Failure($o->params[0]));
								break;
						}
					});
				} else {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:82: characters 11-29
					$finally->handle($cb);
				}
			};
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:84: characters 7-13
			$next();
		}, $lazy);
	}


	/**
	 * @param LazyObject $p
	 * 
	 * @return FutureObject
	 */
	static public function lazy ($p) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:109: characters 5-63
		return Future_Impl_::async(function ($cb)  use (&$p) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:109: characters 38-56
			$p->get()->handle($cb);
		}, true);
	}


	/**
	 * @param FutureObject $p
	 * 
	 * @return FutureObject
	 */
	static public function lift ($p) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:207: characters 5-13
		return $p;
	}


	/**
	 * @param FutureObject $this
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	static public function map ($this1, $f) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:15: characters 12-23
		return $this1->map($f)->gather();
	}


	/**
	 * @param FutureObject $this
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	static public function mapError ($this1, $f) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:33: lines 33-36
		return $this1->map(function ($o)  use (&$f) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:33: lines 33-36
			switch ($o->index) {
				case 0:
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:34: characters 24-25
					return $o;
					break;
				case 1:
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:35: characters 24-37
					return Outcome::Failure($f($o->params[0]));
					break;
			}
		})->gather();
	}


	/**
	 * @param FutureObject $this
	 * @param FutureObject $other
	 * @param \Closure $merger
	 * @param bool $gather
	 * 
	 * @return FutureObject
	 */
	static public function merge ($this1, $other, $merger, $gather = true) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:60: characters 5-97
		if ($gather === null) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:60: characters 5-97
			$gather = true;
		}
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:60: characters 5-97
		return Promise_Impl_::next($this1, function ($t)  use (&$other, &$merger) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:60: characters 30-88
			return Promise_Impl_::next($other, function ($a)  use (&$t, &$merger) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:60: characters 61-80
				return $merger($t, $a);
			}, false);
		}, $gather);
	}


	/**
	 * @param FutureObject $this
	 * @param \Closure $f
	 * @param bool $gather
	 * 
	 * @return FutureObject
	 */
	static public function next ($this1, $f, $gather = true) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:48: lines 48-51
		if ($gather === null) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:48: lines 48-51
			$gather = true;
		}
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:48: lines 48-51
		$ret = $this1->flatMap(function ($o)  use (&$f) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:48: lines 48-51
			switch ($o->index) {
				case 0:
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:49: characters 26-30
					return $f($o->params[0]);
					break;
				case 1:
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:50: characters 26-49
					return new SyncFuture(new LazyConst(Outcome::Failure($o->params[0])));
					break;
			}
		});
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:48: lines 48-51
		if ($gather) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:48: lines 48-51
			return $ret->gather();
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:48: lines 48-51
			return $ret;
		}
	}


	/**
	 * @param FutureObject $this
	 * 
	 * @return FutureObject
	 */
	static public function noise ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:42: characters 5-61
		return Promise_Impl_::next($this1, function ($v) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:42: characters 48-60
			return Promise_Impl_::ofOutcome(Outcome::Success(Noise::Noise()));
		});
	}


	/**
	 * @param mixed $d
	 * 
	 * @return FutureObject
	 */
	static public function ofData ($d) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:106: characters 5-33
		return Promise_Impl_::ofOutcome(Outcome::Success($d));
	}


	/**
	 * @param TypedError $e
	 * 
	 * @return FutureObject
	 */
	static public function ofError ($e) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:103: characters 5-33
		return Promise_Impl_::ofOutcome(Outcome::Failure($e));
	}


	/**
	 * @param FutureObject $f
	 * 
	 * @return FutureObject
	 */
	static public function ofFuture ($f) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:97: characters 12-26
		return $f->map(new HxClosure(Outcome::class, 'Success'))->gather();
	}


	/**
	 * @param Outcome $o
	 * 
	 * @return FutureObject
	 */
	static public function ofOutcome ($o) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:100: characters 5-26
		return new SyncFuture(new LazyConst($o));
	}


	/**
	 * @param FutureObject $s
	 * 
	 * @return FutureObject
	 */
	static public function ofSpecific ($s) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:94: characters 5-36
		return $s;
	}


	/**
	 * @param FutureObject $this
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	static public function recover ($this1, $f) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:27: lines 27-30
		return $this1->flatMap(function ($o)  use (&$f) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:27: lines 27-30
			switch ($o->index) {
				case 0:
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:28: characters 24-38
					return new SyncFuture(new LazyConst($o->params[0]));
					break;
				case 1:
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:29: characters 24-28
					return $f($o->params[0]);
					break;
			}
		})->gather();
	}


	/**
	 * @param FutureObject $this
	 * @param mixed $v
	 * 
	 * @return FutureObject
	 */
	static public function swap ($this1, $v) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:54: characters 5-40
		return Future_Impl_::_tryMap($this1, function ($_)  use (&$v) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:54: characters 32-40
			return $v;
		});
	}


	/**
	 * @param FutureObject $this
	 * @param TypedError $e
	 * 
	 * @return FutureObject
	 */
	static public function swapError ($this1, $e) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:57: characters 5-42
		return Promise_Impl_::mapError($this1, function ($_)  use (&$e) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:57: characters 33-41
			return $e;
		});
	}


	/**
	 * @param FutureObject $this
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	static public function tryRecover ($this1, $f) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:21: lines 21-24
		return $this1->flatMap(function ($o)  use (&$f) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:21: lines 21-24
			switch ($o->index) {
				case 0:
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:22: characters 24-38
					return new SyncFuture(new LazyConst($o));
					break;
				case 1:
					#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Promise.hx:23: characters 24-28
					return $f($o->params[0]);
					break;
			}
		})->gather();
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$NULL = new SyncFuture(new LazyConst(Outcome::Success(null)));
self::$NOISE = new SyncFuture(new LazyConst(Outcome::Success(Noise::Noise())));
self::$NEVER = Future_Impl_::$NEVER->map(new HxClosure(Outcome::class, 'Success'))->gather();
	}
}


Boot::registerClass(Promise_Impl_::class, 'tink.core._Promise.Promise_Impl_');
Promise_Impl_::__hx__init();
