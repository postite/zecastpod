<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\core;

use \php\Boot;
use \tink\core\_Callback\LinkObject;
use \tink\core\_Callback\CallbackList_Impl_;

class SignalTrigger implements SignalObject {
	/**
	 * @var \Array_hx
	 */
	public $handlers;


	/**
	 * @return void
	 */
	public function __construct () {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Signal.hx:188: characters 18-39
		$this->handlers = new \Array_hx();
	}


	/**
	 * @return SignalObject
	 */
	public function asSignal () {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Signal.hx:213: characters 5-16
		return $this;
	}


	/**
	 *  Clear all handlers
	 * 
	 * @return void
	 */
	public function clear () {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Signal.hx:210: characters 5-21
		CallbackList_Impl_::clear($this->handlers);
	}


	/**
	 *  Gets the number of handlers registered
	 * 
	 * @return int
	 */
	public function getLength () {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Signal.hx:201: characters 5-27
		return $this->handlers->length;
	}


	/**
	 * @param \Closure $cb
	 * 
	 * @return LinkObject
	 */
	public function handle ($cb) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Signal.hx:204: characters 5-28
		return CallbackList_Impl_::add($this->handlers, $cb);
	}


	/**
	 *  Emits a value for this signal
	 * 
	 * @param mixed $event
	 * 
	 * @return void
	 */
	public function trigger ($event) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.18.0/haxelib/src/tink/core/Signal.hx:195: characters 5-27
		CallbackList_Impl_::invoke($this->handlers, $event);
	}
}


Boot::registerClass(SignalTrigger::class, 'tink.core.SignalTrigger');
