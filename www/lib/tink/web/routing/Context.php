<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\web\routing;

use \tink\core\_Promise\Promise_Impl_;
use \php\_Boot\HxClosure;
use \tink\http\_Header\HeaderValue_Impl_;
use \tink\multipart\parsers\TinkParser;
use \tink\core\Outcome;
use \tink\http\Header;
use \haxe\ds\StringMap;
use \php\Boot;
use \tink\streams\_RealStream\RealStream_Impl_;
use \tink\core\TypedError;
use \tink\url\_Path\Path_Impl_;
use \tink\core\_Future\FutureObject;
use \tink\url\_Query\QueryStringParser;
use \tink\io\RealSourceTools;
use \tink\url\_Portion\Portion_Impl_;
use \tink\url\_Query\Query_Impl_;
use \tink\core\_Future\Future_Impl_;
use \tink\http\IncomingRequestHeader;
use \tink\http\IncomingRequest;
use \tink\core\_Callback\Callback_Impl_;
use \tink\core\_Promise\Next_Impl_;
use \tink\streams\StreamObject;
use \tink\multipart\_Multipart\Multipart_Impl_;
use \tink\io\_Source\Source_Impl_;
use \tink\core\NamedWith;
use \tink\core\_Lazy\LazyFunc;
use \tink\querystring\_Pairs\Pairs_Impl_;
use \php\_Boot\HxAnon;
use \tink\http\BodyPart;

class Context {
	/**
	 * @var \Closure
	 */
	public $accepts;
	/**
	 * @var int
	 */
	public $depth;
	/**
	 * @var StringMap
	 */
	public $params;
	/**
	 * @var Context
	 */
	public $parent;
	/**
	 * @var \Array_hx
	 */
	public $parts;
	/**
	 * @var IncomingRequest
	 */
	public $request;


	/**
	 * @param string $s
	 * 
	 * @return bool
	 */
	static public function acceptsAll ($s) {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:167: characters 40-51
		return true;
	}


	/**
	 * @param IncomingRequest $request
	 * @param \Closure $getSession
	 * 
	 * @return AuthedContext
	 */
	static public function authed ($request, $getSession) {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:150: characters 7-40
		$tmp = Context::parseAcceptHeader($request->header);
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:153: characters 7-38
		$tmp1 = Path_Impl_::parts($request->header->url->path);
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:155: characters 7-22
		$f = $getSession;
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:155: characters 7-22
		$a1 = $request->header;
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:155: characters 7-22
		$tmp2 = new LazyFunc(function ()  use (&$f, &$a1) {
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:155: characters 7-22
			return $f($a1);
		});
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:148: lines 148-156
		return new AuthedContext(null, $tmp, $request, 0, $tmp1, Query_Impl_::toMap($request->header->url->query), $tmp2);
	}


	/**
	 * @param IncomingRequest $request
	 * 
	 * @return Context
	 */
	static public function ofRequest ($request) {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:140: characters 7-40
		$tmp = Context::parseAcceptHeader($request->header);
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:143: characters 7-38
		$tmp1 = Path_Impl_::parts($request->header->url->path);
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:138: lines 138-145
		return new Context(null, $tmp, $request, 0, $tmp1, Query_Impl_::toMap($request->header->url->query));
	}


	/**
	 * @param Header $h
	 * 
	 * @return \Closure
	 */
	static public function parseAcceptHeader ($h) {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:159: characters 19-32
		$_g = $h->get("accept");
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:159: characters 19-32
		if ($_g->length === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:160: characters 16-26
			return new HxClosure(Context::class, 'acceptsAll');
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:162: characters 67-85
			$accepted_data = [];
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:162: characters 25-85
			$_g1 = 0;
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:162: characters 25-85
			while ($_g1 < $_g->length) {
				#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:162: characters 30-31
				$v = ($_g->arr[$_g1] ?? null);
				#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:162: characters 25-85
				$_g1 = $_g1 + 1;
				#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:162: characters 43-85
				$_g2 = 0;
				#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:162: characters 43-85
				$_g3 = HeaderValue_Impl_::parse($v);
				#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:162: characters 43-85
				while ($_g2 < $_g3->length) {
					#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:162: characters 48-52
					$part = ($_g3->arr[$_g2] ?? null);
					#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:162: characters 43-85
					$_g2 = $_g2 + 1;
					#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:162: characters 67-85
					$accepted_data[$part->value] = true;
				}

			}
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:163: lines 163-164
			if (($accepted_data["*/*"] ?? null)) {
				#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:163: characters 30-40
				return new HxClosure(Context::class, 'acceptsAll');
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:164: characters 14-52
				return function ($t)  use (&$accepted_data) {
					#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:164: characters 27-52
					return array_key_exists($t, $accepted_data);
				};
			}
		}
	}


	/**
	 * @param string $header
	 * 
	 * @return string
	 */
	static public function toCamelCase ($header) {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:55: characters 5-32
		$header1 = $header;
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:56: lines 56-58
		$ret = new \StringBuf();
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:56: lines 56-58
		$pos = 0;
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:56: lines 56-58
		$max = strlen($header1);
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:60: lines 60-68
		while ($pos < $max) {
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:61: characters 32-37
			$pos = $pos + 1;
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:61: characters 14-38
			$index = $pos - 1;
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:61: characters 14-38
			$_g = (strlen($header1) === $index ? 0 : ord($header1[$index]));
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:61: characters 14-38
			if ($_g === 45) {
				#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:63: lines 63-64
				if ($pos < $max) {
					#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:64: characters 35-40
					$pos = $pos + 1;
					#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:64: characters 21-41
					$index1 = $pos - 1;
					#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:64: characters 13-56
					$ret->add(strtolower((($index1 < 0) || ($index1 >= strlen($header1)) ? "" : $header1[$index1])));
				}
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:66: characters 11-25
				$ret->b = ($ret->b??'null') . (chr($_g)??'null');
			}
		}
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:70: characters 5-26
		return $ret->b;
	}


	/**
	 * @param Context $parent
	 * @param \Closure $accepts
	 * @param IncomingRequest $request
	 * @param int $depth
	 * @param \Array_hx $parts
	 * @param StringMap $params
	 * 
	 * @return void
	 */
	public function __construct ($parent, $accepts, $request, $depth, $parts, $params) {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:126: characters 5-25
		$this->parent = $parent;
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:127: characters 5-27
		$this->accepts = $accepts;
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:128: characters 5-27
		$this->request = $request;
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:129: characters 5-23
		$this->depth = $depth;
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:130: characters 5-23
		$this->parts = $parts;
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:131: characters 5-25
		$this->params = $params;
	}


	/**
	 * @return FutureObject
	 */
	public function allRaw () {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:41: characters 12-19
		$_g = $this->request->body;
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:41: characters 5-25
		return RealSourceTools::all(($_g->index === 0 ? $_g->params[0] : Source_Impl_::ofError(new TypedError(501, "not implemented", new HxAnon([
			"fileName" => "tink/web/routing/Context.hx",
			"lineNumber" => 47,
			"className" => "tink.web.routing.Context",
			"methodName" => "get_rawBody",
		])))));
	}


	/**
	 * @return \Array_hx
	 */
	public function getPath () {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:114: characters 5-40
		return $this->parts->slice($this->depth);
	}


	/**
	 * @return \Array_hx
	 */
	public function getPrefix () {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:111: characters 5-43
		return $this->parts->slice(0, $this->depth);
	}


	/**
	 * @return IncomingRequestHeader
	 */
	public function get_header () {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:35: characters 7-28
		return $this->request->header;
	}


	/**
	 * @return int
	 */
	public function get_pathLength () {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:108: characters 7-44
		return $this->parts->length - $this->depth;
	}


	/**
	 * @return StreamObject
	 */
	public function get_rawBody () {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:45: characters 21-38
		$_g = $this->request->body;
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:45: characters 21-38
		if ($_g->index === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:46: characters 24-25
			return $_g->params[0];
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:47: characters 9-62
			return Source_Impl_::ofError(new TypedError(501, "not implemented", new HxAnon([
				"fileName" => "tink/web/routing/Context.hx",
				"lineNumber" => 47,
				"className" => "tink.web.routing.Context",
				"methodName" => "get_rawBody",
			])));
		}
	}


	/**
	 * @param string $name
	 * 
	 * @return bool
	 */
	public function hasParam ($name) {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:117: characters 12-36
		return array_key_exists($name, $this->params->data);
	}


	/**
	 * @return object
	 */
	public function headers () {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:51: characters 12-71
		$_g = new \Array_hx();
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:51: characters 23-29
		$f = $this->request->header->fields->iterator();
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:51: characters 23-29
		while ($f->hasNext()) {
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:51: characters 13-70
			$f1 = $f->next();
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:51: characters 41-60
			$x = Context::toCamelCase($f1->name);
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:51: characters 31-70
			$_g->arr[$_g->length] = new NamedWith($x, $f1->value);
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:51: characters 31-70
			++$_g->length;
		}

		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:51: characters 5-71
		return Pairs_Impl_::ofIterable($_g);
	}


	/**
	 * @param string $name
	 * 
	 * @return string
	 */
	public function param ($name) {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:123: characters 5-29
		return Portion_Impl_::stringly(($this->params->data[$name] ?? null));
	}


	/**
	 * @return FutureObject
	 */
	public function parse () {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:74: characters 19-36
		$_g = $this->request->body;
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:74: characters 19-36
		switch ($_g->index) {
			case 0:
				#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:76: characters 18-21
				$src = $_g->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:77: lines 77-80
				$parseForm = function ()  use (&$src) {
					#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:78: lines 78-80
					return Promise_Impl_::next(RealSourceTools::all($src), Next_Impl_::ofSafeSync(function ($chunk) {
						#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:80: characters 63-145
						$_g1 = new \Array_hx();
						#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:80: characters 64-144
						$part = new QueryStringParser($chunk->toString(), "&", "=", 0);
						#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:80: characters 64-144
						while ($part->hasNext()) {
							#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:80: characters 64-144
							$part1 = $part->next();
							#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:80: characters 115-124
							$part2 = $part1->name;
							#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:80: characters 105-144
							$x = new NamedWith($part2, BodyPart::Value(Portion_Impl_::stringly($part1->value)));
							#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:80: characters 105-144
							$_g1->arr[$_g1->length] = $x;
							#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:80: characters 105-144
							++$_g1->length;
						}

						#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:80: characters 63-145
						return $_g1;
					}));
				};
				#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:82: characters 16-60
				$_g2 = Multipart_Impl_::check($this->request);
				#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:82: characters 16-60
				switch ($_g2->index) {
					case 0:
						#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:83: characters 21-27
						$result = $_g2->params[0];
						#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:84: lines 84-97
						return Future_Impl_::async(function ($cb)  use (&$result) {
							#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:85: characters 15-42
							$contentType = $result->a;
							#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:86: lines 86-89
							$body = RealSourceTools::idealize($result->b, function ($e)  use (&$cb) {
								#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:87: characters 17-38
								Callback_Impl_::invoke($cb, Outcome::Failure($e));
								#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:88: characters 17-36
								return Source_Impl_::$EMPTY;
							});
							#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:96: characters 15-54
							RealStream_Impl_::collect((new TinkParser(($contentType->extensions->data["boundary"] ?? null)))->parse($body))->handle($cb);
						});
						break;
					case 1:
						#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:99: characters 13-24
						return $parseForm();
						break;
				}
				break;
			case 1:
				#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:75: characters 7-32
				return Promise_Impl_::ofOutcome(Outcome::Success($_g->params[0]));
				break;
		}
	}


	/**
	 * @param int $index
	 * 
	 * @return string
	 */
	public function part ($index) {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:120: characters 12-94
		if (($this->depth + $index) >= $this->parts->length) {
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:120: characters 56-58
			return "";
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:120: characters 64-94
			return Portion_Impl_::stringly(($this->parts->arr[$this->depth + $index] ?? null));
		}
	}


	/**
	 * @param int $descend
	 * 
	 * @return Context
	 */
	public function sub ($descend) {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/7c93ab66f476c97e62510c653bb4e58e918e1471/src/tink/web/routing/Context.hx:135: characters 5-104
		return new Context($this, $this->accepts, $this->request, $this->depth + $descend, $this->parts, $this->params);
	}
}


Boot::registerClass(Context::class, 'tink.web.routing.Context');
Boot::registerGetters('tink\\web\\routing\\Context', [
	'pathLength' => true,
	'rawBody' => true,
	'header' => true
]);
