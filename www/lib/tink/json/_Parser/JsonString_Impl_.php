<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace tink\json\_Parser;

use \php\Boot;
use \haxe\format\JsonParser;
use \php\_Boot\HxString;

final class JsonString_Impl_ {
	/**
	 * @param SliceData $this
	 * @param string $s
	 * 
	 * @return bool
	 */
	static public function contains ($this1, $s) {
		#/Users/ut/haxe/haxe_libraries/tink_json/0.9.0/haxelib/src/tink/json/Parser.hx:40: characters 19-51
		$_g = HxString::indexOf($this1->source, $s, $this1->min);
		#/Users/ut/haxe/haxe_libraries/tink_json/0.9.0/haxelib/src/tink/json/Parser.hx:40: characters 19-51
		if ($_g === -1) {
			#/Users/ut/haxe/haxe_libraries/tink_json/0.9.0/haxelib/src/tink/json/Parser.hx:41: characters 16-21
			return false;
		} else if ($_g > $this1->max) {
			#/Users/ut/haxe/haxe_libraries/tink_json/0.9.0/haxelib/src/tink/json/Parser.hx:42: characters 45-50
			return false;
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_json/0.9.0/haxelib/src/tink/json/Parser.hx:43: characters 15-19
			return true;
		}
	}


	/**
	 * @param SliceData $a
	 * @param string $b
	 * 
	 * @return bool
	 */
	static public function equalsString ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_json/0.9.0/haxelib/src/tink/json/Parser.hx:73: lines 73-77
		if (strlen($b) === ($a->max - $a->min)) {
			#/Users/ut/haxe/haxe_libraries/tink_json/0.9.0/haxelib/src/tink/json/Parser.hx:77: characters 9-46
			return HxString::substring($a->source, $a->min, $a->max) === $b;
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_json/0.9.0/haxelib/src/tink/json/Parser.hx:73: lines 73-77
			return false;
		}
	}


	/**
	 * @param SliceData $this
	 * 
	 * @return string
	 */
	static public function get ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_json/0.9.0/haxelib/src/tink/json/Parser.hx:58: characters 5-53
		return HxString::substring($this1->source, $this1->min, $this1->max);
	}


	/**
	 * @param SliceData $this
	 * 
	 * @return float
	 */
	static public function toFloat ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_json/0.9.0/haxelib/src/tink/json/Parser.hx:64: characters 5-33
		return \Std::parseFloat(HxString::substring($this1->source, $this1->min, $this1->max));
	}


	/**
	 * @param SliceData $this
	 * 
	 * @return int
	 */
	static public function toInt ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_json/0.9.0/haxelib/src/tink/json/Parser.hx:61: characters 5-31
		return \Std::parseInt(HxString::substring($this1->source, $this1->min, $this1->max));
	}


	/**
	 * @param SliceData $this
	 * 
	 * @return string
	 */
	static public function toString ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_json/0.9.0/haxelib/src/tink/json/Parser.hx:48: lines 48-50
		if (JsonString_Impl_::contains($this1, "\\")) {
			#/Users/ut/haxe/haxe_libraries/tink_json/0.9.0/haxelib/src/tink/json/Parser.hx:49: characters 9-75
			return (new JsonParser(HxString::substring($this1->source, $this1->min - 1, $this1->max + 1)))->doParse();
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_json/0.9.0/haxelib/src/tink/json/Parser.hx:50: characters 12-17
			return HxString::substring($this1->source, $this1->min, $this1->max);
		}
	}
}


Boot::registerClass(JsonString_Impl_::class, 'tink.json._Parser.JsonString_Impl_');
