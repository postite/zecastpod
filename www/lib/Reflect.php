<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

use \php\_Boot\HxClosure;
use \php\Boot;
use \php\_Boot\HxClass;
use \php\_Boot\HxAnon;

/**
 * The Reflect API is a way to manipulate values dynamically through an
 * abstract interface in an untyped manner. Use with care.
 * @see https://haxe.org/manual/std-reflection.html
 */
class Reflect {
	/**
	 * Copies the fields of structure `o`.
	 * This is only guaranteed to work on anonymous structures.
	 * If `o` is null, the result is unspecified.
	 * 
	 * @param mixed $o
	 * 
	 * @return mixed
	 */
	static public function copy ($o) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:163: lines 163-169
		if (is_object($o)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:164: characters 4-48
			$fields = get_object_vars($o);
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:166: characters 28-34
			$tmp = Boot::getClass(HxAnon::class)->phpClassName;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:166: characters 4-43
			return new $tmp($fields);
		} else {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:168: characters 4-15
			return null;
		}
	}


	/**
	 * Removes the field named `field` from structure `o`.
	 * This method is only guaranteed to work on anonymous structures.
	 * If `o` or `field` are null, the result is unspecified.
	 * 
	 * @param mixed $o
	 * @param string $field
	 * 
	 * @return bool
	 */
	static public function deleteField ($o, $field) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:154: lines 154-159
		if (Reflect::hasField($o, $field)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:155: characters 30-31
			$tmp = $o;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:155: characters 33-38
			$tmp1 = $field;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:155: characters 4-40
			unset($tmp->{$tmp1});
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:156: characters 4-15
			return true;
		} else {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:158: characters 4-16
			return false;
		}
	}


	/**
	 * Returns the value of the field named `field` on object `o`.
	 * If `o` is not an object or has no field named `field`, the result is
	 * null.
	 * If the field is defined as a property, its accessors are ignored. Refer
	 * to `Reflect.getProperty` for a function supporting property accessors.
	 * If `field` is null, the result is unspecified.
	 * (As3) If used on a property field, the getter will be invoked. It is
	 * not possible to obtain the value directly.
	 * 
	 * @param mixed $o
	 * @param string $field
	 * 
	 * @return mixed
	 */
	static public function field ($o, $field) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:45: lines 45-47
		if (is_string($o)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:46: characters 24-45
			$tmp = Boot::dynamicString($o);
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:46: characters 47-52
			$tmp1 = $field;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:46: characters 4-53
			return $tmp->{$tmp1};
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:48: characters 3-34
		if (!is_object($o)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:48: characters 23-34
			return null;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:50: lines 50-52
		if (property_exists($o, $field)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:51: characters 24-25
			$tmp2 = $o;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:51: characters 27-32
			$tmp3 = $field;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:51: characters 4-33
			return $tmp2->{$tmp3};
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:53: lines 53-55
		if (method_exists($o, $field)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:54: characters 4-33
			return new HxClosure($o, $field);
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:57: lines 57-68
		if (($o instanceof HxClass)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:58: characters 4-54
			$phpClassName = $o->phpClassName;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:59: lines 59-61
			if (defined("" . ($phpClassName??'null') . "::" . ($field??'null'))) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:60: characters 5-52
				return constant("" . ($phpClassName??'null') . "::" . ($field??'null'));
			}
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:62: lines 62-64
			if (property_exists($phpClassName, $field)) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:63: characters 25-26
				$tmp4 = $o;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:63: characters 28-33
				$tmp5 = $field;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:63: characters 5-34
				return $tmp4->{$tmp5};
			}
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:65: lines 65-67
			if (method_exists($phpClassName, $field)) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:66: characters 5-45
				return new HxClosure($phpClassName, $field);
			}
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:70: characters 3-14
		return null;
	}


	/**
	 * Returns the fields of structure `o`.
	 * This method is only guaranteed to work on anonymous structures. Refer to
	 * `Type.getInstanceFields` for a function supporting class instances.
	 * If `o` is null, the result is unspecified.
	 * 
	 * @param mixed $o
	 * 
	 * @return \Array_hx
	 */
	static public function fields ($o) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:114: lines 114-116
		if (is_object($o)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:115: characters 4-77
			return \Array_hx::wrap(array_keys(get_object_vars($o)));
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:117: characters 3-12
		return new \Array_hx();
	}


	/**
	 * Tells if structure `o` has a field named `field`.
	 * This is only guaranteed to work for anonymous structures. Refer to
	 * `Type.getInstanceFields` for a function supporting class instances.
	 * If `o` or `field` are null, the result is unspecified.
	 * 
	 * @param mixed $o
	 * @param string $field
	 * 
	 * @return bool
	 */
	static public function hasField ($o, $field) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:33: characters 3-35
		if (!is_object($o)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:33: characters 23-35
			return false;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:34: characters 3-44
		if (property_exists($o, $field)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:34: characters 33-44
			return true;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:36: lines 36-39
		if (($o instanceof HxClass)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:37: characters 4-54
			$phpClassName = $o->phpClassName;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:38: characters 11-142
			if (!(property_exists($phpClassName, $field) || method_exists($phpClassName, $field))) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:38: characters 103-142
				return defined("" . ($phpClassName??'null') . "::" . ($field??'null'));
			} else {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:38: characters 11-142
				return true;
			}
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:41: characters 3-15
		return false;
	}


	/**
	 * Sets the field named `field` of object `o` to value `value`.
	 * If `o` has no field named `field`, this function is only guaranteed to
	 * work for anonymous structures.
	 * If `o` or `field` are null, the result is unspecified.
	 * (As3) If used on a property field, the setter will be invoked. It is
	 * not possible to set the value directly.
	 * 
	 * @param mixed $o
	 * @param string $field
	 * @param mixed $value
	 * 
	 * @return void
	 */
	static public function setField ($o, $field, $value) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:74: characters 19-20
		$tmp = $o;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:74: characters 22-27
		$tmp1 = $field;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/Reflect.hx:74: characters 3-35
		$tmp->{$tmp1} = $value;
	}
}


Boot::registerClass(Reflect::class, 'Reflect');
