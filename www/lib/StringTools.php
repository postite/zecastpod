<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

use \php\Boot;
use \php\_Boot\HxString;

/**
 * This class provides advanced methods on Strings. It is ideally used with
 * `using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
 * to the `String` class.
 * If the first argument to any of the methods is null, the result is
 * unspecified.
 */
class StringTools {
	/**
	 * Tells if the string `s` ends with the string `end`.
	 * If `end` is `null`, the result is unspecified.
	 * If `end` is the empty String `""`, the result is true.
	 * 
	 * @param string $s
	 * @param string $end
	 * 
	 * @return bool
	 */
	static public function endsWith ($s, $end) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:48: characters 10-59
		if ($end !== "") {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:48: characters 23-59
			return substr($s, -strlen($end)) === $end;
		} else {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:48: characters 10-59
			return true;
		}
	}


	/**
	 * Encodes `n` into a hexadecimal representation.
	 * If `digits` is specified, the resulting String is padded with "0" until
	 * its `length` equals `digits`.
	 * 
	 * @param int $n
	 * @param int $digits
	 * 
	 * @return string
	 */
	static public function hex ($n, $digits = null) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:88: characters 3-28
		$s = dechex($n);
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:89: characters 3-15
		$len = 8;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:90: characters 18-78
		$tmp = null;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:90: characters 18-78
		if (null === $digits) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:90: characters 18-78
			$tmp = 8;
		} else {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:90: characters 64-70
			$len = ($digits > 8 ? $digits : 8);
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:90: characters 18-78
			$tmp = $len;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:90: lines 90-93
		if (strlen($s) > $tmp) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:91: characters 4-22
			$s = HxString::substr($s, -$len);
		} else if ($digits !== null) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:93: characters 4-28
			$s = StringTools::lpad($s, "0", $digits);
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:94: characters 3-25
		return strtoupper($s);
	}


	/**
	 * Concatenates `c` to `s` until `s.length` is at least `l`.
	 * If `c` is the empty String `""` or if `l` does not exceed `s.length`,
	 * `s` is returned unchanged.
	 * If `c.length` is 1, the resulting String length is exactly `l`.
	 * Otherwise the length may exceed `l`.
	 * If `c` is null, the result is unspecified.
	 * 
	 * @param string $s
	 * @param string $c
	 * @param int $l
	 * 
	 * @return string
	 */
	static public function lpad ($s, $c, $l) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:75: characters 3-47
		if ((strlen($c) === 0) || (strlen($s) >= $l)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:75: characters 39-47
			return $s;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:77: characters 3-61
		return str_pad($s, (int)(ceil(($l - strlen($s)) / strlen($c))) * strlen($c) + strlen($s), $c, STR_PAD_LEFT);
	}


	/**
	 * Replace all occurrences of the String `sub` in the String `s` by the
	 * String `by`.
	 * If `sub` is the empty String `""`, `by` is inserted after each character
	 * of `s`. If `by` is also the empty String `""`, `s` remains unchanged.
	 * This is a convenience function for `s.split(sub).join(by)`.
	 * If `sub` or `by` are null, the result is unspecified.
	 * 
	 * @param string $s
	 * @param string $sub
	 * @param string $by
	 * 
	 * @return string
	 */
	static public function replace ($s, $sub, $by) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:81: lines 81-83
		if ($sub === "") {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:82: characters 4-50
			return implode($by, str_split($s));
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:84: characters 3-40
		return str_replace($sub, $by, $s);
	}


	/**
	 * Tells if the string `s` starts with the string `start`.
	 * If `start` is `null`, the result is unspecified.
	 * If `start` is the empty String `""`, the result is true.
	 * 
	 * @param string $s
	 * @param string $start
	 * 
	 * @return bool
	 */
	static public function startsWith ($s, $start) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:44: characters 10-53
		if ($start !== "") {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:44: characters 25-53
			return Boot::equal(strpos($s, $start), 0);
		} else {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:44: characters 10-53
			return true;
		}
	}


	/**
	 * Removes leading and trailing space characters of `s`.
	 * This is a convenience function for `ltrim(rtrim(s))`.
	 * 
	 * @param string $s
	 * 
	 * @return string
	 */
	static public function trim ($s) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/StringTools.hx:65: characters 3-24
		return trim($s);
	}
}


Boot::registerClass(StringTools::class, 'StringTools');
