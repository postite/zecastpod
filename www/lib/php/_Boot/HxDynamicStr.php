<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace php\_Boot;

use \php\Boot;

/**
 * For Dynamic access which looks like String.
 * Instances of this class should not be saved anywhere.
 * Instead it should be used to immediately invoke a String field right after instance creation one time only.
 */
class HxDynamicStr extends HxClosure {
	/**
	 * @var string
	 */
	static public $hxString;


	/**
	 * @param string $str
	 * @param string $method
	 * @param mixed $args
	 * 
	 * @return mixed
	 */
	static public function invoke ($str, $method, $args) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:741: characters 3-34
		array_unshift($args, $str);
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:742: characters 3-69
		return call_user_func_array((HxDynamicStr::$hxString??'null') . "::" . ($method??'null'), $args);
	}


	/**
	 * Returns HxDynamicStr instance if `value` is a string.
	 * Otherwise returns `value` as-is.
	 * 
	 * @param mixed $value
	 * 
	 * @return mixed
	 */
	static public function wrap ($value) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:733: lines 733-737
		if (is_string($value)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:734: characters 4-34
			return new HxDynamicStr($value);
		} else {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:736: characters 4-16
			return $value;
		}
	}


	/**
	 * @param string $str
	 * 
	 * @return void
	 */
	public function __construct ($str) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:746: characters 3-19
		parent::__construct($str, null);
	}


	/**
	 * @param string $method
	 * @param mixed $args
	 * 
	 * @return mixed
	 */
	public function __call ($method, $args) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:762: characters 10-38
		array_unshift($args, $this->target);
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:762: characters 10-38
		return call_user_func_array((HxDynamicStr::$hxString??'null') . "::" . ($method??'null'), $args);
	}


	/**
	 * @param string $field
	 * 
	 * @return mixed
	 */
	public function __get ($field) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:751: lines 751-757
		if ($field === "length") {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:753: characters 5-34
			return strlen($this->target);
		} else {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:755: characters 5-17
			$this->func = $field;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:756: characters 5-16
			return $this;
		}
	}


	/**
	 * @see http://php.net/manual/en/language.oop5.magic.php#object.invoke
	 * 
	 * @return mixed
	 */
	public function __invoke () {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:770: characters 10-54
		$str = $this->target;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:770: characters 10-54
		$method = $this->func;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:770: characters 10-54
		$args = func_get_args();
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:770: characters 10-54
		array_unshift($args, $str);
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:770: characters 10-54
		return call_user_func_array((HxDynamicStr::$hxString??'null') . "::" . ($method??'null'), $args);
	}


	/**
	 * Invoke this closure with `newThis` instead of `this`
	 * 
	 * @param mixed $newThis
	 * @param mixed $args
	 * 
	 * @return mixed
	 */
	public function callWith ($newThis, $args) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:787: lines 787-789
		if ($newThis === null) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:788: characters 4-20
			$newThis = $this->target;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:790: characters 10-37
		$method = $this->func;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:790: characters 10-37
		array_unshift($args, $newThis);
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:790: characters 10-37
		return call_user_func_array((HxDynamicStr::$hxString??'null') . "::" . ($method??'null'), $args);
	}


	/**
	 * Generates callable value for PHP
	 * 
	 * @param mixed $eThis
	 * 
	 * @return mixed
	 */
	public function getCallback ($eThis = null) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:777: lines 777-779
		if ($eThis === null) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:778: characters 4-49
			return [$this, $this->func];
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/Boot.hx:780: characters 3-67
		return [new HxDynamicStr($eThis), $this->func];
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$hxString = Boot::getClass(HxString::class)->phpClassName;
	}
}


Boot::registerClass(HxDynamicStr::class, 'php._Boot.HxDynamicStr');
HxDynamicStr::__hx__init();
