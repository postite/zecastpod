<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace mime;

use \haxe\io\Path;
use \haxe\Resource;
use \php\Boot;
use \php\_Boot\HxString;
use \haxe\Json;

class Mime {
	/**
	 * @var mixed
	 */
	static public $db;


	/**
	 * @param string $type
	 * 
	 * @return string
	 */
	static public function extension ($type) {
		#/Users/ut/haxe/haxe_libraries/mime/0.0.1/github/1f4c9b74445fc31651ad3954f3954cf0bb221639/mime/Mime.hx:41: characters 3-36
		if (!\Reflect::hasField(Mime::$db, $type)) {
			#/Users/ut/haxe/haxe_libraries/mime/0.0.1/github/1f4c9b74445fc31651ad3954f3954cf0bb221639/mime/Mime.hx:41: characters 25-36
			return null;
		}
		#/Users/ut/haxe/haxe_libraries/mime/0.0.1/github/1f4c9b74445fc31651ad3954f3954cf0bb221639/mime/Mime.hx:42: characters 3-28
		$entry = \Reflect::field(Mime::$db, $type);
		#/Users/ut/haxe/haxe_libraries/mime/0.0.1/github/1f4c9b74445fc31651ad3954f3954cf0bb221639/mime/Mime.hx:43: characters 3-44
		if ($entry->extensions === null) {
			#/Users/ut/haxe/haxe_libraries/mime/0.0.1/github/1f4c9b74445fc31651ad3954f3954cf0bb221639/mime/Mime.hx:43: characters 33-44
			return null;
		}
		#/Users/ut/haxe/haxe_libraries/mime/0.0.1/github/1f4c9b74445fc31651ad3954f3954cf0bb221639/mime/Mime.hx:44: characters 3-29
		return ($entry->extensions->arr[0] ?? null);
	}


	/**
	 * @return void
	 */
	static public function init () {
	}


	/**
	 * @param string $path
	 * 
	 * @return string
	 */
	static public function lookup ($path) {
		#/Users/ut/haxe/haxe_libraries/mime/0.0.1/github/1f4c9b74445fc31651ad3954f3954cf0bb221639/mime/Mime.hx:31: characters 3-100
		$extension = (HxString::indexOf($path, ".") > -1 ? strtolower(Path::extension($path)) : strtolower($path));
		#/Users/ut/haxe/haxe_libraries/mime/0.0.1/github/1f4c9b74445fc31651ad3954f3954cf0bb221639/mime/Mime.hx:32: lines 32-36
		$_g = 0;
		#/Users/ut/haxe/haxe_libraries/mime/0.0.1/github/1f4c9b74445fc31651ad3954f3954cf0bb221639/mime/Mime.hx:32: lines 32-36
		$_g1 = \Reflect::fields(Mime::$db);
		#/Users/ut/haxe/haxe_libraries/mime/0.0.1/github/1f4c9b74445fc31651ad3954f3954cf0bb221639/mime/Mime.hx:32: lines 32-36
		while ($_g < $_g1->length) {
			#/Users/ut/haxe/haxe_libraries/mime/0.0.1/github/1f4c9b74445fc31651ad3954f3954cf0bb221639/mime/Mime.hx:32: characters 8-12
			$type = ($_g1->arr[$_g] ?? null);
			#/Users/ut/haxe/haxe_libraries/mime/0.0.1/github/1f4c9b74445fc31651ad3954f3954cf0bb221639/mime/Mime.hx:32: lines 32-36
			$_g = $_g + 1;
			#/Users/ut/haxe/haxe_libraries/mime/0.0.1/github/1f4c9b74445fc31651ad3954f3954cf0bb221639/mime/Mime.hx:33: characters 4-29
			$entry = \Reflect::field(Mime::$db, $type);
			#/Users/ut/haxe/haxe_libraries/mime/0.0.1/github/1f4c9b74445fc31651ad3954f3954cf0bb221639/mime/Mime.hx:34: lines 34-35
			if (($entry->extensions !== null) && ($entry->extensions->indexOf($extension) > -1)) {
				#/Users/ut/haxe/haxe_libraries/mime/0.0.1/github/1f4c9b74445fc31651ad3954f3954cf0bb221639/mime/Mime.hx:35: characters 5-16
				return $type;
			}
		}

		#/Users/ut/haxe/haxe_libraries/mime/0.0.1/github/1f4c9b74445fc31651ad3954f3954cf0bb221639/mime/Mime.hx:37: characters 3-14
		return null;
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$db = Json::phpJsonDecode(Resource::getString("mime-db"));
	}
}


Boot::registerClass(Mime::class, 'mime.Mime');
Mime::__hx__init();
