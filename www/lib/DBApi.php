<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

use \tink\core\_Promise\Promise_Impl_;
use \tink\core\Outcome;
use \php\Boot;
use \tink\core\_Future\FutureObject;
use \sys\db\Connection;
use \sys\db\Sqlite;
use \sys\db\Manager;
use \sys\db\TableCreate;
use \sys\io\File;
use \haxe\ds\List_hx;

class DBApi {
	/**
	 * @var DBApi
	 */
	static public $_instance;
	/**
	 * @var Connection
	 */
	static public $cnx;


	/**
	 * @return void
	 */
	static public function createFile () {
		#src/DBApi.hx:69: characters 3-44
		File::saveContent("./dabase.db", "");
	}


	/**
	 * @param Class $m
	 * 
	 * @return void
	 */
	static public function deleteTable ($m) {
		#src/DBApi.hx:65: characters 9-49
		$manager = \Reflect::field($m, "manager");
		#src/DBApi.hx:66: characters 3-54
		DBApi::$cnx->request("DROP TABLE " . ($manager->dbInfos()->name??'null'));
	}


	/**
	 * @return DBApi
	 */
	static public function get_instance () {
		#src/DBApi.hx:16: lines 16-17
		if (DBApi::$_instance === null) {
			#src/DBApi.hx:17: characters 9-31
			DBApi::$_instance = new DBApi();
		}
		#src/DBApi.hx:18: characters 9-25
		return DBApi::$_instance;
	}


	/**
	 * @return DBApi
	 */
	static public function init () {
		#src/DBApi.hx:73: characters 5-35
		DBApi::$cnx = Sqlite::open("dabase.db");
		#src/DBApi.hx:74: characters 3-27
		Manager::set_cnx(DBApi::$cnx);
		#src/DBApi.hx:77: lines 77-80
		if (!TableCreate::exists(\Rec::$manager)) {
			#src/DBApi.hx:79: characters 5-43
			TableCreate::create(\Rec::$manager);
		}
		#src/DBApi.hx:81: characters 3-30
		Manager::initialize();
		#src/DBApi.hx:82: characters 9-31
		return DBApi::get_instance();
	}


	/**
	 * @return void
	 */
	public function __construct () {
	}


	/**
	 * @param int $id
	 * 
	 * @return void
	 */
	public function delete ($id) {
		#src/DBApi.hx:27: characters 9-37
		\Rec::$manager->unsafeGet($id, true)->delete();
	}


	/**
	 * @param int $id
	 * 
	 * @return \Rec
	 */
	public function get ($id) {
		#src/DBApi.hx:24: characters 9-35
		return \Rec::$manager->unsafeGet($id, true);
	}


	/**
	 * @return List_hx
	 */
	public function getAll () {
		#src/DBApi.hx:21: characters 9-33
		return \Rec::$manager->all();
	}


	/**
	 * @param string $filename
	 * @param string $title
	 * @param string $desc
	 * @param int $length
	 * @param string $img
	 * 
	 * @return FutureObject
	 */
	public function saveRec ($filename, $title, $desc, $length, $img) {
		#src/DBApi.hx:32: characters 9-27
		$rec = new \Rec();
		#src/DBApi.hx:33: characters 9-24
		$rec->title = $title;
		#src/DBApi.hx:34: characters 9-30
		$rec->soundUrl = $filename;
		#src/DBApi.hx:35: characters 9-22
		$rec->desc = $desc;
		#src/DBApi.hx:36: characters 9-26
		$rec->length = $length;
		#src/DBApi.hx:37: characters 9-25
		$rec->imageUrl = $img;
		#src/DBApi.hx:38: characters 9-21
		$rec->insert();
		#src/DBApi.hx:39: characters 16-36
		return Promise_Impl_::ofOutcome(Outcome::Success($rec->id));
	}


	/**
	 * @return void
	 */
	public function testit () {
		#src/DBApi.hx:58: characters 9-27
		$rec = new \Rec();
		#src/DBApi.hx:59: characters 9-31
		$rec->soundUrl = "broummm";
		#src/DBApi.hx:60: characters 9-26
		$rec->desc = "paglop";
		#src/DBApi.hx:61: characters 9-21
		$rec->insert();
	}


	/**
	 * @param int $id
	 * @param string $filename
	 * @param string $title
	 * @param string $desc
	 * @param int $length
	 * @param string $img
	 * 
	 * @return FutureObject
	 */
	public function updateRec ($id, $filename, $title, $desc, $length, $img) {
		#src/DBApi.hx:43: characters 9-37
		$rec = \Rec::$manager->unsafeGet($id, true);
		#src/DBApi.hx:44: characters 9-24
		$rec->title = $title;
		#src/DBApi.hx:45: characters 9-22
		$rec->desc = $desc;
		#src/DBApi.hx:46: lines 46-49
		if ($filename !== null) {
			#src/DBApi.hx:47: characters 9-30
			$rec->soundUrl = $filename;
			#src/DBApi.hx:48: characters 9-26
			$rec->length = $length;
		}
		#src/DBApi.hx:50: lines 50-51
		if ($img !== null) {
			#src/DBApi.hx:51: characters 9-25
			$rec->imageUrl = $img;
		}
		#src/DBApi.hx:53: characters 9-21
		$rec->update();
		#src/DBApi.hx:54: characters 16-36
		return Promise_Impl_::ofOutcome(Outcome::Success($rec->id));
	}
}


Boot::registerClass(DBApi::class, 'DBApi');
Boot::registerGetters('\\DBApi', [
	'instance' => true
]);
