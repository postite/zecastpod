<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

use \tink\core\_Promise\Promise_Impl_;
use \tink\core\Outcome;
use \views\__impl\Header;
use \views\__impl\Footer;
use \tink\http\HeaderField;
use \tink\http\_Response\OutgoingResponseData;
use \php\Boot;
use \views\__impl\HeaderHome;
use \php\_Boot\HxDynamicStr;
use \tink\core\_Future\FutureObject;
use \views\__impl\Hello;
use \tink\core\_Future\SyncFuture;
use \views\UpView;
use \views\__impl\Home;
use \tink\io\RealSourceTools;
use \tink\http\_Response\OutgoingResponse_Impl_;
use \haxe\io\Bytes;
use \views\UpdateView;
use \tink\_Chunk\Chunk_Impl_;
use \haxe\io\_BytesData\Container;
use \sys\io\File;
use \views\Layout;
use \tink\core\_Lazy\LazyConst;
use \php\_Boot\HxAnon;
use \views\__impl\Coolrss;
use \views\PodPage;

class Root {
	/**
	 * @var \DBApi
	 */
	public $dbApi;
	/**
	 * @var \RssApi
	 */
	public $rssApi;


	/**
	 * @return void
	 */
	public function __construct () {
		#src/Server.hx:43: characters 3-24
		$this->rssApi = new \RssApi();
		#src/Server.hx:45: characters 3-23
		$this->dbApi = \DBApi::init();
		#src/Server.hx:46: characters 3-40
		Layout::$footer = Footer::render();
		#src/Server.hx:52: characters 3-53
		Layout::$menu = Layout::withLayout(Hello::render(\Array_hx::wrap([new HxAnon([
			"url" => "/rss",
			"title" => "abonne toi",
			"description" => "le flux rss du podcast",
		])])));
		#src/Server.hx:53: characters 3-40
		Layout::$header = Header::render();
	}


	/**
	 * @return OutgoingResponseData
	 */
	public function cook () {
		#src/Server.hx:64: characters 3-36
		$a = OutgoingResponse_Impl_::ofString("aaaaa");
		#src/Server.hx:65: characters 3-72
		$b = HeaderField::setCookie("popo", "papa", null);
		#src/Server.hx:66: characters 3-23
		$a->header->concat(\Array_hx::wrap([$b]));
		#src/Server.hx:67: characters 3-11
		return $a;
	}


	/**
	 * @param int $id
	 * 
	 * @return string
	 */
	public function delete ($id) {
		#src/Server.hx:86: characters 3-19
		$this->dbApi->delete($id);
		#src/Server.hx:87: characters 3-22
		return $this->getRssView();
	}


	/**
	 * @param object $body
	 * 
	 * @return FutureObject
	 */
	public function files ($body) {
		#src/Server.hx:118: lines 118-153
		$_gthis = $this;
		#src/Server.hx:124: lines 124-152
		$f = function ($name)  use (&$_gthis) {
			#src/Server.hx:149: characters 5-16
			$_gthis->up("PasCool");
			#src/Server.hx:150: characters 5-16
			return null;
		};
		#src/Server.hx:124: lines 124-152
		return Promise_Impl_::next(Promise_Impl_::next(Promise_Impl_::next(Promise_Impl_::next(RealSourceTools::all($body->fileToUpload->read()), function ($chunk)  use (&$body) {
			#src/Server.hx:128: characters 12-38
			$body1 = $body->fileToUpload->fileName;
			#src/Server.hx:127: lines 127-130
			return Promise_Impl_::ofOutcome(Outcome::Success(new HxAnon([
				"name" => $body1,
				"content" => $chunk->toBytes(),
			])));
		}), function ($arg) {
			#src/Server.hx:133: characters 5-48
			$cleanSoundName = \Tools::underclean($arg->name);
			#src/Server.hx:134: characters 5-70
			File::saveBytes("./statics/" . ($cleanSoundName??'null'), $arg->content);
			#src/Server.hx:135: characters 5-62
			return Promise_Impl_::ofOutcome(Outcome::Success(new HxAnon([
				"name" => $cleanSoundName,
				"length" => $arg->content->length,
			])));
		}), function ($arg1)  use (&$body) {
			#src/Server.hx:137: lines 137-143
			return Promise_Impl_::next(RealSourceTools::all($body->imgToUpload->read()), function ($s)  use (&$body, &$arg1) {
				#src/Server.hx:140: characters 6-65
				$cleanFileName = \Tools::underclean($body->imgToUpload->fileName);
				#src/Server.hx:141: characters 6-70
				File::saveBytes("./statics/" . ($cleanFileName??'null'), $s->toBytes());
				#src/Server.hx:142: characters 6-69
				return Promise_Impl_::ofOutcome(Outcome::Success(new HxAnon([
					"name" => $arg1->name,
					"length" => HxDynamicStr::wrap($arg1)->length,
					"img" => $cleanFileName,
				])));
			});
		}), function ($arg2)  use (&$_gthis, &$body) {
			#src/Server.hx:145: characters 5-72
			$_gthis->dbApi->saveRec($arg2->name, $body->title, $body->desc, HxDynamicStr::wrap($arg2)->length, $arg2->img);
			#src/Server.hx:146: characters 5-20
			return Promise_Impl_::ofOutcome(Outcome::Success($_gthis->up("Cool")));
		})->flatMap(function ($o)  use (&$f) {
			#src/Server.hx:124: lines 124-152
			switch ($o->index) {
				case 0:
					#src/Server.hx:124: lines 124-152
					return new SyncFuture(new LazyConst($o->params[0]));
					break;
				case 1:
					#src/Server.hx:124: lines 124-152
					return $f($o->params[0]);
					break;
			}
		})->gather();
	}


	/**
	 * @param object $body
	 * 
	 * @return FutureObject
	 */
	public function filesRec ($body) {
		#src/Server.hx:156: lines 156-172
		$_gthis = $this;
		#src/Server.hx:162: lines 162-170
		$f = function ($name)  use (&$_gthis) {
			#src/Server.hx:167: characters 6-17
			$_gthis->up("PasCool");
			#src/Server.hx:168: characters 6-17
			return null;
		};
		#src/Server.hx:162: lines 162-170
		return Promise_Impl_::next(Promise_Impl_::next($this->saveSound($body->fileToUpload), function ($sound)  use (&$_gthis, &$body) {
			#src/Server.hx:162: lines 162-163
			return Promise_Impl_::next($_gthis->saveImg($body->imgToUpload), function ($img)  use (&$sound) {
				#src/Server.hx:163: characters 17-41
				return Promise_Impl_::ofOutcome(Outcome::Success(new HxAnon([
					"sound" => $sound,
					"img" => $img,
				])));
			});
		}), function ($arg)  use (&$_gthis, &$body) {
			#src/Server.hx:164: lines 164-165
			return Promise_Impl_::next($_gthis->recData($arg->sound->name, $body->title, $body->desc, HxDynamicStr::wrap($arg->sound)->length, $arg->img->name), function ($i)  use (&$_gthis) {
				#src/Server.hx:165: characters 16-26
				return Promise_Impl_::ofOutcome(Outcome::Success($_gthis->up("Cool", $i)));
			});
		})->flatMap(function ($o)  use (&$f) {
			#src/Server.hx:162: lines 162-170
			switch ($o->index) {
				case 0:
					#src/Server.hx:162: lines 162-170
					return new SyncFuture(new LazyConst($o->params[0]));
					break;
				case 1:
					#src/Server.hx:162: lines 162-170
					return $f($o->params[0]);
					break;
			}
		})->gather();
	}


	/**
	 * @param object $body
	 * 
	 * @return FutureObject
	 */
	public function filesUpdate ($body) {
		#src/Server.hx:175: lines 175-194
		$_gthis = $this;
		#src/Server.hx:182: lines 182-192
		$f = function ($name)  use (&$_gthis) {
			#src/Server.hx:189: characters 6-17
			$_gthis->up("PasCool");
			#src/Server.hx:190: characters 6-17
			return null;
		};
		#src/Server.hx:182: lines 182-192
		return Promise_Impl_::next(Promise_Impl_::next($this->saveSound($body->fileToUpload), function ($sound)  use (&$_gthis, &$body) {
			#src/Server.hx:184: lines 184-185
			return Promise_Impl_::next($_gthis->saveImg($body->imgToUpload), function ($img)  use (&$sound) {
				#src/Server.hx:185: characters 18-42
				return Promise_Impl_::ofOutcome(Outcome::Success(new HxAnon([
					"sound" => $sound,
					"img" => $img,
				])));
			});
		}), function ($arg)  use (&$_gthis, &$body) {
			#src/Server.hx:186: lines 186-187
			return Promise_Impl_::next($_gthis->updateData($body->id, $arg->sound->name, $body->title, $body->desc, HxDynamicStr::wrap($arg->sound)->length, $arg->img->name), function ($i)  use (&$_gthis) {
				#src/Server.hx:187: characters 17-27
				return Promise_Impl_::ofOutcome(Outcome::Success($_gthis->up("Cool", $i)));
			});
		})->flatMap(function ($o)  use (&$f) {
			#src/Server.hx:182: lines 182-192
			switch ($o->index) {
				case 0:
					#src/Server.hx:182: lines 182-192
					return new SyncFuture(new LazyConst($o->params[0]));
					break;
				case 1:
					#src/Server.hx:182: lines 182-192
					return $f($o->params[0]);
					break;
			}
		})->gather();
	}


	/**
	 * @return OutgoingResponseData
	 */
	public function getRss () {
		#src/Server.hx:93: characters 3-29
		$rss = $this->rssApi->getRss();
		#src/Server.hx:96: characters 3-42
		File::saveContent("./rss.rss", $rss->rssTemplate());
		#src/Server.hx:97: characters 11-39
		$this1 = $rss->rssTemplate();
		#src/Server.hx:98: characters 3-57
		return OutgoingResponse_Impl_::blob(200, Chunk_Impl_::ofBytes(new Bytes(strlen($this1), new Container($this1))), "application/xml");
	}


	/**
	 * @return string
	 */
	public function getRssView () {
		#src/Server.hx:75: characters 3-24
		return Layout::withLayout(Coolrss::render($this->rssApi->getRss()));
	}


	/**
	 * @return string
	 */
	public function hello () {
		#src/Server.hx:58: characters 3-44
		Layout::$header = HeaderHome::render();
		#src/Server.hx:59: characters 3-42
		return Layout::withLayout(Home::render());
	}


	/**
	 * @param int $id
	 * 
	 * @return string
	 */
	public function modif ($id) {
		#src/Server.hx:81: characters 3-55
		return Layout::withLayout((new UpdateView(null, $this->dbApi->get($id)))->form());
	}


	/**
	 * @param int $id
	 * 
	 * @return string
	 */
	public function podId ($id) {
		#src/Server.hx:114: characters 3-65
		return Layout::withLayout((new PodPage($this->dbApi->get($id)))->render(), "podpage");
	}


	/**
	 * @param string $name
	 * @param string $title
	 * @param string $desc
	 * @param int $length
	 * @param string $img
	 * 
	 * @return FutureObject
	 */
	public function recData ($name, $title, $desc, $length, $img) {
		#src/Server.hx:219: characters 3-51
		return $this->dbApi->saveRec($name, $title, $desc, $length, $img);
	}


	/**
	 * @param object $img
	 * 
	 * @return FutureObject
	 */
	public function saveImg ($img) {
		#src/Server.hx:197: lines 197-204
		if ($img !== null) {
			#src/Server.hx:198: lines 198-202
			return Promise_Impl_::next(RealSourceTools::all($img->read()), function ($chunk)  use (&$img) {
				#src/Server.hx:199: characters 5-47
				$cleanName = \Tools::underclean($img->fileName);
				#src/Server.hx:200: characters 5-69
				File::saveBytes("./statics/" . ($cleanName??'null'), $chunk->toBytes());
				#src/Server.hx:201: characters 5-29
				return Promise_Impl_::ofOutcome(Outcome::Success(new HxAnon(["name" => $cleanName])));
			});
		} else {
			#src/Server.hx:204: characters 11-37
			return Promise_Impl_::ofOutcome(Outcome::Success(new HxAnon(["name" => null])));
		}
	}


	/**
	 * @param object $sound
	 * 
	 * @return FutureObject
	 */
	public function saveSound ($sound) {
		#src/Server.hx:208: lines 208-215
		if ($sound !== null) {
			#src/Server.hx:209: lines 209-213
			return Promise_Impl_::next(RealSourceTools::all($sound->read()), function ($chunk)  use (&$sound) {
				#src/Server.hx:210: characters 5-54
				$cleanSoundName = \Tools::underclean($sound->fileName);
				#src/Server.hx:211: characters 5-74
				File::saveBytes("./statics/" . ($cleanSoundName??'null'), $chunk->toBytes());
				#src/Server.hx:212: characters 5-56
				return Promise_Impl_::ofOutcome(Outcome::Success(new HxAnon([
					"name" => $cleanSoundName,
					"length" => $chunk->getLength(),
				])));
			});
		} else {
			#src/Server.hx:215: characters 11-51
			return Promise_Impl_::ofOutcome(Outcome::Success(new HxAnon([
				"name" => null,
				"length" => null,
			])));
		}
	}


	/**
	 * @param string $status
	 * @param int $id
	 * 
	 * @return string
	 */
	public function up ($status = null, $id = null) {
		#src/Server.hx:104: lines 104-107
		if ($id !== null) {
			#src/Server.hx:106: characters 4-59
			return Layout::withLayout((new UpView($status, $this->dbApi->get($id)))->form());
		}
		#src/Server.hx:108: characters 3-54
		return Layout::withLayout((new UpView($status))->form());
	}


	/**
	 * @param int $id
	 * @param string $name
	 * @param string $title
	 * @param string $desc
	 * @param int $length
	 * @param string $img
	 * 
	 * @return FutureObject
	 */
	public function updateData ($id, $name, $title, $desc, $length, $img) {
		#src/Server.hx:224: characters 9-62
		return $this->dbApi->updateRec($id, $name, $title, $desc, $length, $img);
	}
}


Boot::registerClass(Root::class, 'Root');
