<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

use \php\_Boot\HxClosure;
use \php\Boot;
use \tink\http\SimpleHandler;
use \tink\core\_Future\SyncFuture;
use \tink\web\routing\Context;
use \tink\web\routing\Router12;
use \tink\http\_Response\OutgoingResponse_Impl_;
use \tink\http\containers\PhpContainer;
use \tink\core\_Promise\Recover_Impl_;
use \tink\core\_Lazy\LazyConst;
use \tink\http\middleware\Static_hx;

class Server {
	/**
	 * @return void
	 */
	static public function main () {
		#src/Server.hx:25: characters 3-37
		$container = PhpContainer::$inst;
		#src/Server.hx:29: characters 3-45
		$router = new Router12(new \Root());
		#src/Server.hx:30: lines 30-32
		$handler = new SimpleHandler(function ($req)  use (&$router) {
			#src/Server.hx:31: characters 24-46
			$this1 = Context::ofRequest($req);
			#src/Server.hx:31: characters 11-85
			$this11 = $router->route($this1);
			#src/Server.hx:31: characters 11-85
			$f = Recover_Impl_::ofSync(new HxClosure(OutgoingResponse_Impl_::class, 'reportError'));
			#src/Server.hx:31: characters 11-85
			return $this11->flatMap(function ($o)  use (&$f) {
				#src/Server.hx:31: characters 11-85
				switch ($o->index) {
					case 0:
						#src/Server.hx:31: characters 11-85
						return new SyncFuture(new LazyConst($o->params[0]));
						break;
					case 1:
						#src/Server.hx:31: characters 11-85
						return $f($o->params[0]);
						break;
				}
			})->gather();
		});
		#src/Server.hx:33: characters 13-66
		$handler = (new Static_hx("./statics", "/"))->apply($handler);
		#src/Server.hx:34: characters 3-25
		$container->run($handler);
	}
}


Boot::registerClass(Server::class, 'Server');
