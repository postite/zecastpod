<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace haxe;

use \php\Boot;

/**
 * If haxe.MainLoop is kept from DCE, then we will insert an haxe.EntryPoint.run() call just at then end of main().
 * This class can be redefined by custom frameworks so they can handle their own main loop logic.
 */
class EntryPoint {
	/**
	 * @var \Array_hx
	 */
	static public $pending;
	/**
	 * @var int
	 */
	static public $threadCount = 0;


	/**
	 * @return float
	 */
	static public function processEvents () {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/EntryPoint.hx:93: lines 93-103
		while (true) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/EntryPoint.hx:96: characters 12-27
			$_this = EntryPoint::$pending;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/EntryPoint.hx:96: characters 12-27
			if ($_this->length > 0) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/EntryPoint.hx:96: characters 12-27
				$_this->length--;
			}
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/EntryPoint.hx:96: characters 4-28
			$f = array_shift($_this->arr);
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/EntryPoint.hx:101: characters 4-25
			if ($f === null) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/EntryPoint.hx:101: characters 20-25
				break;
			}
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/EntryPoint.hx:102: characters 4-7
			$f();
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/EntryPoint.hx:104: lines 104-105
		if (!MainLoop::hasEvents() && (EntryPoint::$threadCount === 0)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/EntryPoint.hx:105: characters 4-13
			return -1;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/EntryPoint.hx:106: characters 3-41
		return MainLoop::tick();
	}


	/**
	 * Start the main loop. Depending on the platform, this can return immediately or will only return when the application exits.
	 * 
	 * @return void
	 */
	static public function run () {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/EntryPoint.hx:134: lines 134-140
		while (!(EntryPoint::processEvents() < 0)) {
		}
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$pending = new \Array_hx();
	}
}


Boot::registerClass(EntryPoint::class, 'haxe.EntryPoint');
EntryPoint::__hx__init();
