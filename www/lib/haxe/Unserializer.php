<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace haxe;

use \haxe\ds\StringMap;
use \php\Boot;
use \php\_Boot\HxException;
use \haxe\_Unserializer\DefaultResolver;
use \php\_Boot\HxString;
use \haxe\io\Bytes;
use \haxe\ds\ObjectMap;
use \haxe\ds\List_hx;
use \haxe\ds\IntMap;
use \php\_Boot\HxAnon;

/**
 * The `Unserializer` class is the complement to the `Serializer` class. It parses
 * a serialization `String` and creates objects from the contained data.
 * This class can be used in two ways:
 * - create a `new Unserializer()` instance with a given serialization
 * String, then call its `unserialize()` method until all values are
 * extracted
 * - call `Unserializer.run()`  to unserialize a single value from a given
 * String
 * The specification of the serialization format can be found here:
 * <https://haxe.org/manual/serialization/format>
 */
class Unserializer {
	/**
	 * @var string
	 */
	static public $BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
	/**
	 * @var \Array_hx
	 */
	static public $CODES = null;
	/**
	 * @var object
	 * This value can be set to use custom type resolvers.
	 * A type resolver finds a `Class` or `Enum` instance from a given `String`.
	 * By default, the Haxe `Type` Api is used.
	 * A type resolver must provide two methods:
	 * 1. `resolveClass(name:String):Class<Dynamic>` is called to determine a
	 * `Class` from a class name
	 * 2. `resolveEnum(name:String):Enum<Dynamic>` is called to determine an
	 * `Enum` from an enum name
	 * This value is applied when a new `Unserializer` instance is created.
	 * Changing it afterwards has no effect on previously created instances.
	 */
	static public $DEFAULT_RESOLVER;


	/**
	 * @var string
	 */
	public $buf;
	/**
	 * @var \Array_hx
	 */
	public $cache;
	/**
	 * @var int
	 */
	public $length;
	/**
	 * @var int
	 */
	public $pos;
	/**
	 * @var object
	 */
	public $resolver;
	/**
	 * @var \Array_hx
	 */
	public $scache;


	/**
	 * @return \Array_hx
	 */
	static public function initCodes () {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:73: lines 73-77
		$codes = new \Array_hx();
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:79: lines 79-80
		$_g1 = 0;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:79: lines 79-80
		$_g = strlen(Unserializer::$BASE64);
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:79: lines 79-80
		while ($_g1 < $_g) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:79: lines 79-80
			$_g1 = $_g1 + 1;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:79: characters 8-9
			$i = $_g1 - 1;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:80: characters 10-42
			$s = Unserializer::$BASE64;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:80: characters 4-47
			$codes[(strlen($s) === $i ? 0 : ord($s[$i]))] = $i;
		}

		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:81: characters 3-15
		return $codes;
	}


	/**
	 * Unserializes `v` and returns the according value.
	 * This is a convenience function for creating a new instance of
	 * Unserializer with `v` as buffer and calling its unserialize() method
	 * once.
	 * 
	 * @param string $v
	 * 
	 * @return mixed
	 */
	static public function run ($v) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:468: characters 3-43
		return (new Unserializer($v))->unserialize();
	}


	/**
	 * Creates a new Unserializer instance, with its internal buffer
	 * initialized to `buf`.
	 * This does not parse `buf` immediately. It is parsed only when calls to
	 * `this.unserialize` are made.
	 * Each Unserializer instance maintains its own cache.
	 * 
	 * @param string $buf
	 * 
	 * @return void
	 */
	public function __construct ($buf) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:105: characters 4-18
		$this->buf = $buf;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:106: characters 4-23
		$this->length = strlen($buf);
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:107: characters 4-11
		$this->pos = 0;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:111: characters 4-24
		$this->scache = new \Array_hx();
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:112: characters 4-23
		$this->cache = new \Array_hx();
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:113: characters 3-28
		$r = Unserializer::$DEFAULT_RESOLVER;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:114: lines 114-117
		if ($r === null) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:115: characters 4-29
			$r = new DefaultResolver();
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:116: characters 4-24
			Unserializer::$DEFAULT_RESOLVER = $r;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:118: characters 3-15
		$this->resolver = $r;
	}


	/**
	 * @return int
	 */
	public function readDigits () {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:150: characters 4-14
		$k = 0;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:151: characters 4-18
		$s = false;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:152: characters 4-19
		$fpos = $this->pos;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:153: lines 153-168
		while (true) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:154: characters 13-21
			$p = $this->pos;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:154: characters 13-21
			$s1 = $this->buf;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:154: characters 5-22
			$c = (strlen($s1) === $p ? 0 : ord($s1[$p]));
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:155: lines 155-156
			if ($c === 0) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:156: characters 5-10
				break;
			}
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:157: lines 157-163
			if ($c === 45) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:158: lines 158-159
				if ($this->pos !== $fpos) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:159: characters 7-12
					break;
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:160: characters 6-14
				$s = true;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:161: characters 6-11
				$this->pos++;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:162: characters 6-14
				continue;
			}
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:164: lines 164-165
			if (($c < 48) || ($c > 57)) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:165: characters 6-11
				break;
			}
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:166: characters 5-32
			$k = $k * 10 + ($c - 48);
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:167: characters 5-10
			$this->pos++;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:169: lines 169-170
		if ($s) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:170: characters 5-12
			$k = $k * -1;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:171: characters 4-12
		return $k;
	}


	/**
	 * @return float
	 */
	public function readFloat () {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:175: characters 3-16
		$p1 = $this->pos;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:176: lines 176-184
		while (true) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:177: characters 13-21
			$p = $this->pos;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:177: characters 13-21
			$s = $this->buf;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:177: characters 5-22
			$c = (strlen($s) === $p ? 0 : ord($s[$p]));
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:178: characters 4-35
			if ($c === 0) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:178: characters 30-35
				break;
			}
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:180: lines 180-183
			if ((($c >= 43) && ($c < 58)) || ($c === 101) || ($c === 69)) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:181: characters 6-11
				$this->pos++;
			} else {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:183: characters 6-11
				break;
			}
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:185: characters 4-48
		return \Std::parseFloat(HxString::substr($this->buf, $p1, $this->pos - $p1));
	}


	/**
	 * Unserializes the next part of `this` Unserializer instance and returns
	 * the according value.
	 * This function may call `this.resolver.resolveClass` to determine a
	 * Class from a String, and `this.resolver.resolveEnum` to determine an
	 * Enum from a String.
	 * If `this` Unserializer instance contains no more or invalid data, an
	 * exception is thrown.
	 * This operation may fail on structurally valid data if a type cannot be
	 * resolved or if a field cannot be set. This can happen when unserializing
	 * Strings that were serialized on a different Haxe target, in which the
	 * serialization side has to make sure not to include platform-specific
	 * data.
	 * Classes are created from `Type.createEmptyInstance`, which means their
	 * constructors are not called.
	 * 
	 * @return mixed
	 */
	public function unserialize () {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:236: characters 12-22
		$p = $this->pos++;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:236: characters 12-22
		$s = $this->buf;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:236: characters 12-22
		switch ((strlen($s) === $p ? 0 : ord($s[$p]))) {
			case 65:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:443: characters 4-29
				$name = $this->unserialize();
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:444: characters 4-41
				$cl = $this->resolver->resolveClass($name);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:445: lines 445-446
				if ($cl === null) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:446: characters 5-10
					throw new HxException("Class not found " . ($name??'null'));
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:447: characters 4-13
				return $cl;
				break;
			case 66:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:449: characters 4-29
				$name1 = $this->unserialize();
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:450: characters 4-39
				$e = $this->resolver->resolveEnum($name1);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:451: lines 451-452
				if ($e === null) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:452: characters 5-10
					throw new HxException("Enum not found " . ($name1??'null'));
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:453: characters 4-12
				return $e;
				break;
			case 67:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:432: characters 5-30
				$name2 = $this->unserialize();
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:433: characters 4-41
				$cl1 = $this->resolver->resolveClass($name2);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:434: lines 434-435
				if ($cl1 === null) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:435: characters 5-10
					throw new HxException("Class not found " . ($name2??'null'));
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:436: characters 4-51
				$o = \Type::createEmptyInstance($cl1);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:437: characters 4-17
				$_this = $this->cache;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:437: characters 4-17
				$_this->arr[$_this->length] = $o;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:437: characters 4-17
				++$_this->length;

				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:438: characters 4-25
				$o->hxUnserialize($this);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:439: characters 8-18
				$p1 = $this->pos++;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:439: characters 8-18
				$s1 = $this->buf;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:439: lines 439-440
				if (((strlen($s1) === $p1 ? 0 : ord($s1[$p1]))) !== 103) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:440: characters 5-10
					throw new HxException("Invalid custom data");
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:441: characters 4-12
				return $o;
				break;
			case 77:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:366: characters 4-36
				$h = new ObjectMap();
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:367: characters 4-17
				$_this1 = $this->cache;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:367: characters 4-17
				$_this1->arr[$_this1->length] = $h;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:367: characters 4-17
				++$_this1->length;

				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:369: lines 369-372
				while (true) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:369: characters 11-19
					$p2 = $this->pos;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:369: characters 11-19
					$s2 = $this->buf;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:369: lines 369-372
					if (!(((strlen($s2) === $p2 ? 0 : ord($s2[$p2]))) !== 104)) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:369: lines 369-372
						break;
					}
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:371: characters 5-27
					$h->set($this->unserialize(), $this->unserialize());
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:373: characters 4-9
				$this->pos++;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:374: characters 4-12
				return $h;
				break;
			case 82:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:298: characters 4-25
				$n = $this->readDigits();
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:299: lines 299-300
				if (($n < 0) || ($n >= $this->scache->length)) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:300: characters 5-10
					throw new HxException("Invalid string reference");
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:301: characters 4-20
				return ($this->scache->arr[$n] ?? null);
				break;
			case 97:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:266: characters 5-34
				$a = new \Array_hx();
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:268: characters 5-18
				$_this2 = $this->cache;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:268: characters 5-18
				$_this2->arr[$_this2->length] = $a;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:268: characters 5-18
				++$_this2->length;

				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:269: lines 269-281
				while (true) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:270: characters 14-22
					$p3 = $this->pos;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:270: characters 14-22
					$s3 = $this->buf;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:270: characters 6-23
					$c = (strlen($s3) === $p3 ? 0 : ord($s3[$p3]));
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:271: lines 271-274
					if ($c === 104) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:272: characters 6-11
						$this->pos++;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:273: characters 7-12
						break;
					}
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:275: lines 275-280
					if ($c === 117) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:276: characters 6-11
						$this->pos++;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:277: characters 7-28
						$n1 = $this->readDigits();
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:278: characters 7-29
						$a[$a->length + $n1 - 1] = null;
					} else {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:280: characters 7-28
						$x = $this->unserialize();
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:280: characters 7-28
						$a->arr[$a->length] = $x;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:280: characters 7-28
						++$a->length;
					}
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:285: characters 5-13
				return $a;
				break;
			case 98:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:343: characters 4-36
				$h1 = new StringMap();
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:344: characters 4-17
				$_this3 = $this->cache;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:344: characters 4-17
				$_this3->arr[$_this3->length] = $h1;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:344: characters 4-17
				++$_this3->length;

				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:346: lines 346-349
				while (true) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:346: characters 11-19
					$p4 = $this->pos;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:346: characters 11-19
					$s4 = $this->buf;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:346: lines 346-349
					if (!(((strlen($s4) === $p4 ? 0 : ord($s4[$p4]))) !== 104)) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:346: lines 346-349
						break;
					}
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:347: characters 5-27
					$s5 = $this->unserialize();
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:348: characters 5-27
					$value = $this->unserialize();
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:348: characters 5-27
					$h1->data[$s5] = $value;

				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:350: characters 4-9
				$this->pos++;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:351: characters 4-12
				return $h1;
				break;
			case 99:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:305: characters 5-30
				$name3 = $this->unserialize();
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:306: characters 4-41
				$cl2 = $this->resolver->resolveClass($name3);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:307: lines 307-308
				if ($cl2 === null) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:308: characters 5-10
					throw new HxException("Class not found " . ($name3??'null'));
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:309: characters 4-41
				$o1 = \Type::createEmptyInstance($cl2);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:310: characters 4-17
				$_this4 = $this->cache;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:310: characters 4-17
				$_this4->arr[$_this4->length] = $o1;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:310: characters 4-17
				++$_this4->length;

				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:311: characters 4-24
				$this->unserializeObject($o1);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:312: characters 4-12
				return $o1;
				break;
			case 100:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:248: characters 5-23
				return $this->readFloat();
				break;
			case 102:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:242: characters 5-17
				return false;
				break;
			case 105:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:246: characters 5-24
				return $this->readDigits();
				break;
			case 106:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:322: characters 4-29
				$name4 = $this->unserialize();
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:323: characters 4-43
				$edecl = $this->resolver->resolveEnum($name4);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:324: lines 324-325
				if ($edecl === null) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:325: characters 5-10
					throw new HxException("Enum not found " . ($name4??'null'));
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:326: characters 4-9
				$this->pos++;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:327: characters 4-29
				$index = $this->readDigits();
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:328: characters 4-51
				$tag = (\Type::getEnumConstructs($edecl)->arr[$index] ?? null);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:329: lines 329-330
				if ($tag === null) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:330: characters 5-10
					throw new HxException("Unknown enum index " . ($name4??'null') . "@" . ($index??'null'));
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:331: characters 4-40
				$e1 = $this->unserializeEnum($edecl, $tag);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:332: characters 4-17
				$_this5 = $this->cache;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:332: characters 4-17
				$_this5->arr[$_this5->length] = $e1;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:332: characters 4-17
				++$_this5->length;

				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:333: characters 4-12
				return $e1;
				break;
			case 107:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:259: characters 5-20
				return \Math::$NaN;
				break;
			case 108:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:335: characters 4-23
				$l = new List_hx();
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:336: characters 4-17
				$_this6 = $this->cache;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:336: characters 4-17
				$_this6->arr[$_this6->length] = $l;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:336: characters 4-17
				++$_this6->length;

				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:338: lines 338-339
				while (true) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:338: characters 11-19
					$p5 = $this->pos;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:338: characters 11-19
					$s6 = $this->buf;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:338: lines 338-339
					if (!(((strlen($s6) === $p5 ? 0 : ord($s6[$p5]))) !== 104)) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:338: lines 338-339
						break;
					}
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:339: characters 5-25
					$l->add($this->unserialize());
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:340: characters 4-9
				$this->pos++;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:341: characters 4-12
				return $l;
				break;
			case 109:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:261: characters 5-34
				return \Math::$NEGATIVE_INFINITY;
				break;
			case 110:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:238: characters 5-16
				return null;
				break;
			case 111:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:288: characters 5-16
				$o2 = new HxAnon();
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:289: characters 5-18
				$_this7 = $this->cache;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:289: characters 5-18
				$_this7->arr[$_this7->length] = $o2;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:289: characters 5-18
				++$_this7->length;

				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:290: characters 4-24
				$this->unserializeObject($o2);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:291: characters 4-12
				return $o2;
				break;
			case 112:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:263: characters 5-34
				return \Math::$POSITIVE_INFINITY;
				break;
			case 113:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:353: characters 4-33
				$h2 = new IntMap();
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:354: characters 4-17
				$_this8 = $this->cache;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:354: characters 4-17
				$_this8->arr[$_this8->length] = $h2;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:354: characters 4-17
				++$_this8->length;

				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:356: characters 12-22
				$p6 = $this->pos++;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:356: characters 12-22
				$s7 = $this->buf;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:356: characters 4-23
				$c1 = (strlen($s7) === $p6 ? 0 : ord($s7[$p6]));
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:357: lines 357-361
				while ($c1 === 58) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:358: characters 5-26
					$i = $this->readDigits();
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:359: characters 5-27
					$value1 = $this->unserialize();
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:359: characters 5-27
					$h2->data[$i] = $value1;

					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:360: characters 9-19
					$p7 = $this->pos++;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:360: characters 9-19
					$s8 = $this->buf;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:360: characters 9-19
					$c1 = (strlen($s8) === $p7 ? 0 : ord($s8[$p7]));
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:362: lines 362-363
				if ($c1 !== 104) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:363: characters 5-10
					throw new HxException("Invalid IntMap format");
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:364: characters 4-12
				return $h2;
				break;
			case 114:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:293: characters 5-26
				$n2 = $this->readDigits();
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:294: lines 294-295
				if (($n2 < 0) || ($n2 >= $this->cache->length)) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:295: characters 6-11
					throw new HxException("Invalid reference");
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:296: characters 5-20
				return ($this->cache->arr[$n2] ?? null);
				break;
			case 115:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:391: characters 5-28
				$len = $this->readDigits();
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:392: characters 4-18
				$buf = $this->buf;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:393: characters 9-19
				$p8 = $this->pos++;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:393: characters 9-19
				$s9 = $this->buf;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:393: lines 393-394
				if ((((strlen($s9) === $p8 ? 0 : ord($s9[$p8]))) !== 58) || (($this->length - $this->pos) < $len)) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:394: characters 5-10
					throw new HxException("Invalid bytes length");
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:398: characters 4-22
				$codes = Unserializer::$CODES;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:399: lines 399-402
				if ($codes === null) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:400: characters 5-24
					$codes = Unserializer::initCodes();
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:401: characters 5-18
					Unserializer::$CODES = $codes;
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:403: characters 4-16
				$i1 = $this->pos;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:404: characters 4-23
				$rest = $len & 3;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:406: characters 4-31
				$max = $i1 + ($len - $rest);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:407: characters 4-42
				$bytes = Bytes::alloc(($len >> 2) * 3 + (($rest >= 2 ? $rest - 1 : 0)));
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:408: characters 4-17
				$bpos = 0;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:409: lines 409-417
				while ($i1 < $max) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:410: characters 47-50
					$i1 = $i1 + 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:410: characters 20-51
					$index1 = $i1 - 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:410: characters 5-53
					$c11 = ($codes->arr[(strlen($buf) === $index1 ? 0 : ord($buf[$index1]))] ?? null);
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:411: characters 47-50
					$i1 = $i1 + 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:411: characters 20-51
					$index2 = $i1 - 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:411: characters 5-53
					$c2 = ($codes->arr[(strlen($buf) === $index2 ? 0 : ord($buf[$index2]))] ?? null);
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:412: characters 15-21
					$bpos = $bpos + 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:412: characters 5-44
					$this1 = $bytes->b;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:412: characters 5-44
					$this1->s = substr_replace($this1->s, chr(($c11 << 2) | ($c2 >> 4)), $bpos - 1, 1);


					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:413: characters 47-50
					$i1 = $i1 + 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:413: characters 20-51
					$index3 = $i1 - 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:413: characters 5-53
					$c3 = ($codes->arr[(strlen($buf) === $index3 ? 0 : ord($buf[$index3]))] ?? null);
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:414: characters 15-21
					$bpos = $bpos + 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:414: characters 5-44
					$this2 = $bytes->b;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:414: characters 5-44
					$this2->s = substr_replace($this2->s, chr(($c2 << 4) | ($c3 >> 2)), $bpos - 1, 1);


					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:415: characters 47-50
					$i1 = $i1 + 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:415: characters 20-51
					$index4 = $i1 - 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:415: characters 20-51
					$c4 = (strlen($buf) === $index4 ? 0 : ord($buf[$index4]));
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:416: characters 15-21
					$bpos = $bpos + 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:416: characters 5-37
					$this3 = $bytes->b;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:416: characters 5-37
					$this3->s = substr_replace($this3->s, chr(($c3 << 6) | ($codes->arr[$c4] ?? null)), $bpos - 1, 1);


				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:418: lines 418-426
				if ($rest >= 2) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:419: characters 47-50
					$i1 = $i1 + 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:419: characters 20-51
					$index5 = $i1 - 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:419: characters 5-53
					$c12 = ($codes->arr[(strlen($buf) === $index5 ? 0 : ord($buf[$index5]))] ?? null);
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:420: characters 47-50
					$i1 = $i1 + 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:420: characters 20-51
					$index6 = $i1 - 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:420: characters 5-53
					$c21 = ($codes->arr[(strlen($buf) === $index6 ? 0 : ord($buf[$index6]))] ?? null);
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:421: characters 15-21
					$bpos = $bpos + 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:421: characters 5-44
					$this4 = $bytes->b;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:421: characters 5-44
					$this4->s = substr_replace($this4->s, chr(($c12 << 2) | ($c21 >> 4)), $bpos - 1, 1);


					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:422: lines 422-425
					if ($rest === 3) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:423: characters 48-51
						$i1 = $i1 + 1;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:423: characters 21-52
						$index7 = $i1 - 1;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:423: characters 21-52
						$c31 = (strlen($buf) === $index7 ? 0 : ord($buf[$index7]));
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:424: characters 16-22
						$bpos = $bpos + 1;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:424: characters 6-45
						$this5 = $bytes->b;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:424: characters 6-45
						$this5->s = substr_replace($this5->s, chr(($c21 << 4) | (($codes->arr[$c31] ?? null) >> 2)), $bpos - 1, 1);


					}
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:428: characters 4-7
				$tmp = $this;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:428: characters 4-14
				$tmp->pos = $tmp->pos + $len;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:429: characters 4-21
				$_this9 = $this->cache;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:429: characters 4-21
				$_this9->arr[$_this9->length] = $bytes;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:429: characters 4-21
				++$_this9->length;

				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:430: characters 4-16
				return $bytes;
				break;
			case 116:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:240: characters 5-16
				return true;
				break;
			case 118:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:376: characters 4-10
				$d = null;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-381
				$tmp1 = null;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-380
				$tmp2 = null;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-380
				$tmp3 = null;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-379
				$tmp4 = null;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-379
				$tmp5 = null;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-378
				$tmp6 = null;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-378
				$tmp7 = null;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: characters 8-52
				$tmp8 = null;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: characters 8-16
				$p9 = $this->pos;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: characters 8-16
				$s10 = $this->buf;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: characters 8-52
				if (((strlen($s10) === $p9 ? 0 : ord($s10[$p9]))) >= 48) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: characters 32-40
					$p10 = $this->pos;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: characters 32-40
					$s11 = $this->buf;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: characters 8-52
					$tmp8 = ((strlen($s11) === $p10 ? 0 : ord($s11[$p10]))) <= 57;
				} else {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: characters 8-52
					$tmp8 = false;
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-378
				if ($tmp8) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:378: characters 5-17
					$p11 = $this->pos + 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:378: characters 5-17
					$s12 = $this->buf;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-378
					$tmp7 = ((strlen($s12) === $p11 ? 0 : ord($s12[$p11]))) >= 48;
				} else {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-378
					$tmp7 = false;
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-378
				if ($tmp7) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:378: characters 33-45
					$p12 = $this->pos + 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:378: characters 33-45
					$s13 = $this->buf;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-378
					$tmp6 = ((strlen($s13) === $p12 ? 0 : ord($s13[$p12]))) <= 57;
				} else {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-378
					$tmp6 = false;
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-379
				if ($tmp6) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:379: characters 5-17
					$p13 = $this->pos + 2;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:379: characters 5-17
					$s14 = $this->buf;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-379
					$tmp5 = ((strlen($s14) === $p13 ? 0 : ord($s14[$p13]))) >= 48;
				} else {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-379
					$tmp5 = false;
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-379
				if ($tmp5) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:379: characters 33-45
					$p14 = $this->pos + 2;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:379: characters 33-45
					$s15 = $this->buf;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-379
					$tmp4 = ((strlen($s15) === $p14 ? 0 : ord($s15[$p14]))) <= 57;
				} else {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-379
					$tmp4 = false;
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-380
				if ($tmp4) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:380: characters 5-17
					$p15 = $this->pos + 3;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:380: characters 5-17
					$s16 = $this->buf;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-380
					$tmp3 = ((strlen($s16) === $p15 ? 0 : ord($s16[$p15]))) >= 48;
				} else {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-380
					$tmp3 = false;
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-380
				if ($tmp3) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:380: characters 33-45
					$p16 = $this->pos + 3;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:380: characters 33-45
					$s17 = $this->buf;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-380
					$tmp2 = ((strlen($s17) === $p16 ? 0 : ord($s17[$p16]))) <= 57;
				} else {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-380
					$tmp2 = false;
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-381
				if ($tmp2) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:381: characters 5-17
					$p17 = $this->pos + 4;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:381: characters 5-17
					$s18 = $this->buf;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-381
					$tmp1 = ((strlen($s18) === $p17 ? 0 : ord($s18[$p17]))) === 45;
				} else {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-381
					$tmp1 = false;
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:377: lines 377-387
				if ($tmp1) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:384: characters 5-44
					$d = \Date::fromString(HxString::substr($this->buf, $this->pos, 19));
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:385: characters 5-8
					$tmp9 = $this;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:385: characters 5-14
					$tmp9->pos = $tmp9->pos + 19;
				} else {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:387: characters 5-35
					$d = \Date::fromTime($this->readFloat());
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:388: characters 4-17
				$_this10 = $this->cache;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:388: characters 4-17
				$_this10->arr[$_this10->length] = $d;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:388: characters 4-17
				++$_this10->length;

				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:389: characters 4-12
				return $d;
				break;
			case 119:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:314: characters 4-29
				$name5 = $this->unserialize();
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:315: characters 4-43
				$edecl1 = $this->resolver->resolveEnum($name5);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:316: lines 316-317
				if ($edecl1 === null) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:317: characters 5-10
					throw new HxException("Enum not found " . ($name5??'null'));
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:318: characters 4-50
				$e2 = $this->unserializeEnum($edecl1, $this->unserialize());
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:319: characters 4-17
				$_this11 = $this->cache;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:319: characters 4-17
				$_this11->arr[$_this11->length] = $e2;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:319: characters 4-17
				++$_this11->length;

				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:320: characters 4-12
				return $e2;
				break;
			case 120:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:303: characters 4-9
				throw (is_object($__hx__throw = $this->unserialize()) && $__hx__throw instanceof \Throwable ? $__hx__throw : new HxException($__hx__throw));
				break;
			case 121:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:250: characters 5-28
				$len1 = $this->readDigits();
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:251: characters 9-19
				$p18 = $this->pos++;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:251: characters 9-19
				$s19 = $this->buf;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:251: lines 251-252
				if ((((strlen($s19) === $p18 ? 0 : ord($s19[$p18]))) !== 58) || (($this->length - $this->pos) < $len1)) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:252: characters 6-11
					throw new HxException("Invalid string length");
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:253: characters 4-32
				$s20 = HxString::substr($this->buf, $this->pos, $len1);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:254: characters 4-7
				$tmp10 = $this;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:254: characters 4-14
				$tmp10->pos = $tmp10->pos + $len1;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:255: characters 4-32
				$s20 = urldecode($s20);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:256: characters 4-18
				$_this12 = $this->scache;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:256: characters 4-18
				$_this12->arr[$_this12->length] = $s20;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:256: characters 4-18
				++$_this12->length;

				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:257: characters 4-12
				return $s20;
				break;
			case 122:
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:244: characters 5-13
				return 0;
				break;
			default:
								break;
		}

		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:456: characters 4-9
		$this->pos--;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:457: characters 27-42
		$_this13 = $this->buf;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:457: characters 27-42
		$index8 = $this->pos;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:457: characters 4-9
		throw new HxException("Invalid char " . (((($index8 < 0) || ($index8 >= strlen($_this13)) ? "" : $_this13[$index8]))??'null') . " at position " . ($this->pos??'null'));
	}


	/**
	 * @param Enum $edecl
	 * @param string $tag
	 * 
	 * @return mixed
	 */
	public function unserializeEnum ($edecl, $tag) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:204: characters 7-17
		$p = $this->pos++;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:204: characters 7-17
		$s = $this->buf;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:204: lines 204-205
		if (((strlen($s) === $p ? 0 : ord($s[$p]))) !== 58) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:205: characters 4-9
			throw new HxException("Invalid enum format");
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:206: characters 3-28
		$nargs = $this->readDigits();
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:207: lines 207-208
		if ($nargs === 0) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:208: characters 4-37
			return \Type::createEnum($edecl, $tag);
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:209: characters 3-26
		$args = new \Array_hx();
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:210: lines 210-211
		while (true) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:210: characters 10-17
			$nargs = $nargs - 1;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:210: lines 210-211
			if (!(($nargs + 1) > 0)) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:210: lines 210-211
				break;
			}
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:211: characters 4-28
			$x = $this->unserialize();
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:211: characters 4-28
			$args->arr[$args->length] = $x;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:211: characters 4-28
			++$args->length;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:212: characters 3-41
		return \Type::createEnum($edecl, $tag, $args);
	}


	/**
	 * @param object $o
	 * 
	 * @return void
	 */
	public function unserializeObject ($o) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:189: lines 189-199
		while (true) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:190: lines 190-191
			if ($this->pos >= $this->length) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:191: characters 6-11
				throw new HxException("Invalid object");
			}
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:192: characters 9-17
			$p = $this->pos;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:192: characters 9-17
			$s = $this->buf;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:192: lines 192-193
			if (((strlen($s) === $p ? 0 : ord($s[$p]))) === 103) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:193: characters 6-11
				break;
			}
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:194: characters 5-37
			$k = $this->unserialize();
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:195: lines 195-196
			if (!Boot::is($k, Boot::getClass('String'))) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:196: characters 6-11
				throw new HxException("Invalid object key");
			}
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:198: characters 5-28
			\Reflect::setField($o, $k, $this->unserialize());
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/Unserializer.hx:200: characters 4-9
		$this->pos++;
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$DEFAULT_RESOLVER = new DefaultResolver();
	}
}


Boot::registerClass(Unserializer::class, 'haxe.Unserializer');
Unserializer::__hx__init();
