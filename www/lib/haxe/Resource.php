<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace haxe;

use \haxe\io\Path;
use \php\Boot;
use \sys\io\File;

/**
 * Resource can be used to access resources that were added through the
 * -resource file@name command line parameter.
 * Depending on their type they can be obtained as String through
 * getString(name), or as binary data through getBytes(name).
 * A list of all available resource names can be obtained from listNames().
 */
class Resource {
	/**
	 * @return string
	 */
	static public function getDir () {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Resource.hx:36: characters 3-55
		return (dirname(__FILE__)??'null') . "/../../res";
	}


	/**
	 * @param string $name
	 * 
	 * @return string
	 */
	static public function getPath ($name) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Resource.hx:41: characters 3-48
		return (Resource::getDir()??'null') . "/" . (Path::escape($name)??'null');
	}


	/**
	 * Retrieves the resource identified by `name` as a String.
	 * If `name` does not match any resource name, null is returned.
	 * 
	 * @param string $name
	 * 
	 * @return string
	 */
	static public function getString ($name) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Resource.hx:53: characters 3-28
		$path = Resource::getPath($name);
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Resource.hx:54: lines 54-57
		if (!file_exists($path)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Resource.hx:55: characters 4-8
			return null;
		} else {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Resource.hx:57: characters 4-32
			return File::getContent($path);
		}
	}
}


Boot::registerClass(Resource::class, 'haxe.Resource');
