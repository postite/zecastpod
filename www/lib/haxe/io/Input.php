<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace haxe\io;

use \php\Boot;
use \php\_Boot\HxException;

/**
 * An Input is an abstract reader. See other classes in the `haxe.io` package
 * for several possible implementations.
 * All functions which read data throw `Eof` when the end of the stream
 * is reached.
 */
class Input {
	/**
	 * Close the input source.
	 * Behaviour while reading after calling this method is unspecified.
	 * 
	 * @return void
	 */
	public function close () {
	}


	/**
	 * Read and return one byte.
	 * 
	 * @return int
	 */
	public function readByte () {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/io/Input.hx:53: characters 10-15
		throw new HxException("Not implemented");
	}


	/**
	 * Read `len` bytes and write them into `s` to the position specified by `pos`.
	 * Returns the actual length of read data that can be smaller than `len`.
	 * See `readFullBytes` that tries to read the exact amount of specified bytes.
	 * 
	 * @param Bytes $s
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return int
	 */
	public function readBytes ($s, $pos, $len) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/io/Input.hx:65: characters 3-15
		$k = $len;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/io/Input.hx:66: characters 3-69
		$b = $s->b;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/io/Input.hx:67: lines 67-68
		if (($pos < 0) || ($len < 0) || (($pos + $len) > $s->length)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/io/Input.hx:68: characters 4-9
			throw new HxException(Error::OutsideBounds());
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/io/Input.hx:69: lines 69-83
		try {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/io/Input.hx:70: lines 70-82
			while ($k > 0) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/io/Input.hx:74: characters 6-28
				$val = $this->readByte();
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/io/Input.hx:74: characters 6-28
				$b->s = substr_replace($b->s, chr($val), $pos, 1);

				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/io/Input.hx:80: characters 5-10
				$pos = $pos + 1;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/io/Input.hx:81: characters 5-8
				$k = $k - 1;
			}
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			if ($__hx__real_e instanceof Eof) {
				$eof = $__hx__real_e;
							} else  throw $__hx__caught_e;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/io/Input.hx:84: characters 3-15
		return $len - $k;
	}
}


Boot::registerClass(Input::class, 'haxe.io.Input');
