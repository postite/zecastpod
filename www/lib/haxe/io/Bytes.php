<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace haxe\io;

use \php\Boot;
use \haxe\io\_BytesData\Container;

class Bytes {
	/**
	 * @var Container
	 */
	public $b;
	/**
	 * @var int
	 */
	public $length;


	/**
	 * @param int $length
	 * 
	 * @return Bytes
	 */
	static public function alloc ($length) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:187: characters 3-52
		return new Bytes($length, new Container(str_repeat(chr(0), $length)));
	}


	/**
	 * Read the most efficiently possible the n-th byte of the data.
	 * Behavior when reading outside of the available data is unspecified.
	 * 
	 * @param Container $b
	 * @param int $pos
	 * 
	 * @return int
	 */
	static public function fastGet ($b, $pos) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:203: characters 3-20
		return ord($b->s[$pos]);
	}


	/**
	 * @param Container $b
	 * 
	 * @return Bytes
	 */
	static public function ofData ($b) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:195: characters 3-32
		return new Bytes(strlen($b->s), $b);
	}


	/**
	 * @param string $s
	 * 
	 * @return Bytes
	 */
	static public function ofString ($s) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:191: characters 3-32
		return new Bytes(strlen($s), new Container($s));
	}


	/**
	 * @param int $length
	 * @param Container $b
	 * 
	 * @return void
	 */
	public function __construct ($length, $b) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:31: characters 3-23
		$this->length = $length;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:32: characters 3-13
		$this->b = $b;
	}


	/**
	 * @return string
	 */
	public function toHex () {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:169: characters 3-27
		$s = new \StringBuf();
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:170: characters 3-18
		$chars = new \Array_hx();
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:172: lines 172-173
		$_g1 = 0;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:172: lines 172-173
		$_g = strlen("0123456789abcdef");
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:172: lines 172-173
		while ($_g1 < $_g) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:172: lines 172-173
			$_g1 = $_g1 + 1;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:172: characters 8-9
			$i = $_g1 - 1;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:173: characters 4-33
			$x = (($i < 0) || ($i >= strlen("0123456789abcdef")) ? null : ord("0123456789abcdef"[$i]));
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:173: characters 4-33
			$chars->arr[$chars->length] = $x;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:173: characters 4-33
			++$chars->length;

		}

		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:174: lines 174-178
		$_g11 = 0;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:174: lines 174-178
		$_g2 = $this->length;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:174: lines 174-178
		while ($_g11 < $_g2) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:174: lines 174-178
			$_g11 = $_g11 + 1;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:175: characters 4-19
			$c = ord($this->b->s[$_g11 - 1]);
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:176: characters 4-28
			$s->b = ($s->b??'null') . (chr(($chars->arr[$c >> 4] ?? null))??'null');
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:177: characters 4-28
			$s->b = ($s->b??'null') . (chr(($chars->arr[$c & 15] ?? null))??'null');
		}

		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:179: characters 3-22
		return $s->b;
	}


	/**
	 * @return string
	 */
	public function toString () {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/io/Bytes.hx:165: characters 3-11
		return $this->b->s;
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(Bytes::class, 'haxe.io.Bytes');
