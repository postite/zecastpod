<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace haxe\ds;

use \php\Boot;
use \haxe\ds\_List\ListIterator;
use \haxe\ds\_List\ListNode;

/**
 * A linked-list of elements. The list is composed of element container objects
 * that are chained together. It is optimized so that adding or removing an
 * element does not imply copying the whole list content every time.
 * @see https://haxe.org/manual/std-List.html
 */
class List_hx {
	/**
	 * @var ListNode
	 */
	public $h;
	/**
	 * @var int
	 * The length of `this` List.
	 */
	public $length;
	/**
	 * @var ListNode
	 */
	public $q;


	/**
	 * Creates a new empty list.
	 * 
	 * @return void
	 */
	public function __construct () {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:45: characters 3-13
		$this->length = 0;
	}


	/**
	 * Adds element `item` at the end of `this` List.
	 * `this.length` increases by 1.
	 * 
	 * @param mixed $item
	 * 
	 * @return void
	 */
	public function add ($item) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:54: characters 3-39
		$x = new ListNode($item, null);
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:55: lines 55-58
		if ($this->h === null) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:56: characters 4-9
			$this->h = $x;
		} else {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:58: characters 4-14
			$this->q->next = $x;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:59: characters 3-8
		$this->q = $x;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:60: characters 3-11
		$this->length++;
	}


	/**
	 * Returns an iterator on the elements of the list.
	 * 
	 * @return ListIterator
	 */
	public function iterator () {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:162: characters 3-32
		return new ListIterator($this->h);
	}


	/**
	 * Returns a string representation of `this` List, with `sep` separating
	 * each element.
	 * 
	 * @param string $sep
	 * 
	 * @return string
	 */
	public function join ($sep) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:193: characters 3-27
		$s = new \StringBuf();
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:194: characters 3-20
		$first = true;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:195: characters 3-13
		$l = $this->h;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:196: lines 196-203
		while ($l !== null) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:197: lines 197-200
			if ($first) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:198: characters 5-18
				$first = false;
			} else {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:200: characters 5-15
				$s->add($sep);
			}
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:201: characters 4-17
			$s->add($l->item);
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:202: characters 4-14
			$l = $l->next;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:204: characters 3-22
		return $s->b;
	}


	/**
	 * Returns a new list where all elements have been converted by the
	 * function `f`.
	 * 
	 * @param \Closure $f
	 * 
	 * @return List_hx
	 */
	public function map ($f) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:228: characters 3-22
		$b = new List_hx();
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:229: characters 3-13
		$l = $this->h;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:230: lines 230-234
		while ($l !== null) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:231: characters 4-19
			$v = $l->item;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:232: characters 4-14
			$l = $l->next;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:233: characters 4-15
			$b->add($f($v));
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/ds/List.hx:235: characters 3-11
		return $b;
	}
}


Boot::registerClass(List_hx::class, 'haxe.ds.List');
