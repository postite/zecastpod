<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace haxe\format;

use \php\Boot;
use \php\_Boot\HxException;
use \php\_Boot\HxString;
use \php\_Boot\HxAnon;

/**
 * An implementation of JSON parser in Haxe.
 * This class is used by `haxe.Json` when native JSON implementation
 * is not available.
 * @see https://haxe.org/manual/std-Json-parsing.html
 */
class JsonParser {
	/**
	 * @var int
	 */
	public $pos;
	/**
	 * @var string
	 */
	public $str;


	/**
	 * @param string $str
	 * 
	 * @return void
	 */
	public function __construct ($str) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:52: characters 3-17
		$this->str = $str;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:53: characters 3-15
		$this->pos = 0;
	}


	/**
	 * @return mixed
	 */
	public function doParse () {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:57: characters 3-27
		$result = $this->parseRec();
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:58: characters 3-9
		$c = null;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:59: lines 59-66
		while (true) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:59: characters 33-43
			$s = $this->str;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:59: characters 33-43
			$index = $this->pos++;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:59: characters 33-43
			$c = (strlen($s) === $index ? 0 : ord($s[$index]));
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:59: lines 59-66
			if (!($c !== 0)) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:59: lines 59-66
				break;
			}
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:60: lines 60-65
			switch ($c) {
				case 9:
				case 10:
				case 13:
				case 32:
										break;
				default:
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:64: characters 6-19
					$this->invalidChar();
					break;
			}
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:67: characters 3-16
		return $result;
	}


	/**
	 * @return void
	 */
	public function invalidChar () {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:265: characters 3-8
		$this->pos--;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:266: characters 25-56
		$s = $this->str;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:266: characters 25-56
		$index = $this->pos;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:266: characters 3-8
		throw new HxException("Invalid char " . (((strlen($s) === $index ? 0 : ord($s[$index])))??'null') . " at position " . ($this->pos??'null'));
	}


	/**
	 * @param int $start
	 * 
	 * @return void
	 */
	public function invalidNumber ($start) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:270: characters 3-8
		throw new HxException("Invalid number at position " . ($start??'null') . ": " . (HxString::substr($this->str, $start, $this->pos - $start)??'null'));
	}


	/**
	 * @return mixed
	 */
	public function parseRec () {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:71: lines 71-149
		while (true) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:72: characters 12-22
			$s = $this->str;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:72: characters 12-22
			$index = $this->pos++;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:72: characters 4-23
			$c = (strlen($s) === $index ? 0 : ord($s[$index]));
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:73: lines 73-148
			switch ($c) {
				case 9:
				case 10:
				case 13:
				case 32:
										break;
				case 34:
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:143: characters 5-25
					return $this->parseString();
					break;
				case 45:
				case 48:
				case 49:
				case 50:
				case 51:
				case 52:
				case 53:
				case 54:
				case 55:
				case 56:
				case 57:
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
					$c1 = $c;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
					$start = $this->pos - 1;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
					$minus = $c1 === 45;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
					$digit = !$minus;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
					$zero = $c1 === 48;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
					$point = false;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
					$e = false;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
					$pm = false;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
					$end = false;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
					while (true) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
						$s1 = $this->str;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
						$index1 = $this->pos++;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
						$c1 = (strlen($s1) === $index1 ? 0 : ord($s1[$index1]));
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
						switch ($c1) {
							case 43:
							case 45:
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								if (!$e || $pm) {
									#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
									$this->invalidNumber($start);
								}
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								$digit = false;
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								$pm = true;
								break;
							case 46:
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								if ($minus || $point || $e) {
									#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
									$this->invalidNumber($start);
								}
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								$digit = false;
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								$point = true;
								break;
							case 48:
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								if ($zero && !$point) {
									#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
									$this->invalidNumber($start);
								}
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								if ($minus) {
									#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
									$minus = false;
									#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
									$zero = true;
								}
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								$digit = true;
								break;
							case 49:
							case 50:
							case 51:
							case 52:
							case 53:
							case 54:
							case 55:
							case 56:
							case 57:
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								if ($zero && !$point) {
									#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
									$this->invalidNumber($start);
								}
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								if ($minus) {
									#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
									$minus = false;
								}
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								$digit = true;
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								$zero = false;
								break;
							case 69:
							case 101:
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								if ($minus || $zero || $e) {
									#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
									$this->invalidNumber($start);
								}
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								$digit = false;
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								$e = true;
								break;
							default:
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								if (!$digit) {
									#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
									$this->invalidNumber($start);
								}
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								$this->pos--;
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
								$end = true;
								break;
						}
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
						if ($end) {
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
							break;
						}
					}
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
					$f = \Std::parseFloat(HxString::substr($this->str, $start, $this->pos - $start));
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
					$i = (int)($f);
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
					if (Boot::equal($i, $f)) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
						return $i;
					} else {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:145: characters 12-26
						return $f;
					}
					break;
				case 91:
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:103: characters 5-45
					$arr = new \Array_hx();
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:103: characters 5-45
					$comma = null;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:104: lines 104-120
					while (true) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:105: characters 14-24
						$s2 = $this->str;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:105: characters 14-24
						$index2 = $this->pos++;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:106: lines 106-119
						switch ((strlen($s2) === $index2 ? 0 : ord($s2[$index2]))) {
							case 9:
							case 10:
							case 13:
							case 32:
																break;
							case 44:
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:113: characters 7-51
								if ($comma) {
									#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:113: characters 19-32
									$comma = false;
								} else {
									#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:113: characters 38-51
									$this->invalidChar();
								}
								break;
							case 93:
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:110: characters 7-41
								if ($comma === false) {
									#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:110: characters 28-41
									$this->invalidChar();
								}
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:111: characters 7-17
								return $arr;
								break;
							default:
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:115: characters 7-32
								if ($comma) {
									#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:115: characters 19-32
									$this->invalidChar();
								}
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:116: characters 7-12
								$this->pos--;
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:117: characters 7-27
								$x = $this->parseRec();
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:117: characters 7-27
								$arr->arr[$arr->length] = $x;
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:117: characters 7-27
								++$arr->length;

								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:118: characters 7-19
								$comma = true;
								break;
						}
					}
					break;
				case 102:
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:129: characters 5-20
					$save = $this->pos;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 9-109
					$tmp = null;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 9-83
					$tmp1 = null;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 9-57
					$tmp2 = null;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 9-19
					$s3 = $this->str;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 9-19
					$index3 = $this->pos++;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 9-57
					if (((strlen($s3) === $index3 ? 0 : ord($s3[$index3]))) === 97) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 35-45
						$s4 = $this->str;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 35-45
						$index4 = $this->pos++;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 9-57
						$tmp2 = ((strlen($s4) === $index4 ? 0 : ord($s4[$index4]))) !== 108;
					} else {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 9-57
						$tmp2 = true;
					}
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 9-83
					if (!$tmp2) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 61-71
						$s5 = $this->str;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 61-71
						$index5 = $this->pos++;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 9-83
						$tmp1 = ((strlen($s5) === $index5 ? 0 : ord($s5[$index5]))) !== 115;
					} else {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 9-83
						$tmp1 = true;
					}
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 9-109
					if (!$tmp1) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 87-97
						$s6 = $this->str;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 87-97
						$index6 = $this->pos++;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 9-109
						$tmp = ((strlen($s6) === $index6 ? 0 : ord($s6[$index6]))) !== 101;
					} else {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: characters 9-109
						$tmp = true;
					}
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:130: lines 130-133
					if ($tmp) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:131: characters 6-16
						$this->pos = $save;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:132: characters 6-19
						$this->invalidChar();
					}
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:134: characters 5-17
					return false;
					break;
				case 110:
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:136: characters 5-20
					$save1 = $this->pos;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:137: characters 9-83
					$tmp3 = null;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:137: characters 9-57
					$tmp4 = null;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:137: characters 9-19
					$s7 = $this->str;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:137: characters 9-19
					$index7 = $this->pos++;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:137: characters 9-57
					if (((strlen($s7) === $index7 ? 0 : ord($s7[$index7]))) === 117) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:137: characters 35-45
						$s8 = $this->str;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:137: characters 35-45
						$index8 = $this->pos++;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:137: characters 9-57
						$tmp4 = ((strlen($s8) === $index8 ? 0 : ord($s8[$index8]))) !== 108;
					} else {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:137: characters 9-57
						$tmp4 = true;
					}
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:137: characters 9-83
					if (!$tmp4) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:137: characters 61-71
						$s9 = $this->str;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:137: characters 61-71
						$index9 = $this->pos++;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:137: characters 9-83
						$tmp3 = ((strlen($s9) === $index9 ? 0 : ord($s9[$index9]))) !== 108;
					} else {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:137: characters 9-83
						$tmp3 = true;
					}
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:137: lines 137-140
					if ($tmp3) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:138: characters 6-16
						$this->pos = $save1;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:139: characters 6-19
						$this->invalidChar();
					}
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:141: characters 5-16
					return null;
					break;
				case 116:
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:122: characters 5-20
					$save2 = $this->pos;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:123: characters 9-83
					$tmp5 = null;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:123: characters 9-57
					$tmp6 = null;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:123: characters 9-19
					$s10 = $this->str;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:123: characters 9-19
					$index10 = $this->pos++;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:123: characters 9-57
					if (((strlen($s10) === $index10 ? 0 : ord($s10[$index10]))) === 114) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:123: characters 35-45
						$s11 = $this->str;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:123: characters 35-45
						$index11 = $this->pos++;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:123: characters 9-57
						$tmp6 = ((strlen($s11) === $index11 ? 0 : ord($s11[$index11]))) !== 117;
					} else {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:123: characters 9-57
						$tmp6 = true;
					}
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:123: characters 9-83
					if (!$tmp6) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:123: characters 61-71
						$s12 = $this->str;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:123: characters 61-71
						$index12 = $this->pos++;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:123: characters 9-83
						$tmp5 = ((strlen($s12) === $index12 ? 0 : ord($s12[$index12]))) !== 101;
					} else {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:123: characters 9-83
						$tmp5 = true;
					}
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:123: lines 123-126
					if ($tmp5) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:124: characters 6-16
						$this->pos = $save2;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:125: characters 6-19
						$this->invalidChar();
					}
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:127: characters 5-16
					return true;
					break;
				case 123:
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:77: characters 5-59
					$obj = new HxAnon();
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:77: characters 5-59
					$field = null;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:77: characters 5-59
					$comma1 = null;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:78: lines 78-101
					while (true) {
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:79: characters 14-24
						$s13 = $this->str;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:79: characters 14-24
						$index13 = $this->pos++;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:80: lines 80-100
						switch ((strlen($s13) === $index13 ? 0 : ord($s13[$index13]))) {
							case 9:
							case 10:
							case 13:
							case 32:
																break;
							case 34:
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:96: characters 7-49
								if (($field !== null) || $comma1) {
									#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:96: characters 36-49
									$this->invalidChar();
								}
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:97: characters 7-28
								$field = $this->parseString();
								break;
							case 44:
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:94: characters 7-51
								if ($comma1) {
									#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:94: characters 19-32
									$comma1 = false;
								} else {
									#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:94: characters 38-51
									$this->invalidChar();
								}
								break;
							case 58:
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:88: lines 88-89
								if ($field === null) {
									#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:89: characters 8-21
									$this->invalidChar();
								}
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:90: characters 7-45
								\Reflect::setField($obj, $field, $this->parseRec());
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:91: characters 7-19
								$field = null;
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:92: characters 7-19
								$comma1 = true;
								break;
							case 125:
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:84: lines 84-85
								if (($field !== null) || ($comma1 === false)) {
									#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:85: characters 8-21
									$this->invalidChar();
								}
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:86: characters 7-17
								return $obj;
								break;
							default:
								#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:99: characters 7-20
								$this->invalidChar();
								break;
						}
					}
					break;
				default:
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:147: characters 5-18
					$this->invalidChar();
					break;
			}
		}
	}


	/**
	 * @return string
	 */
	public function parseString () {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:153: characters 3-19
		$start = $this->pos;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:154: characters 3-18
		$buf = null;
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:155: lines 155-211
		while (true) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:156: characters 12-22
			$s = $this->str;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:156: characters 12-22
			$index = $this->pos++;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:156: characters 4-23
			$c = (strlen($s) === $index ? 0 : ord($s[$index]));
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:157: lines 157-158
			if ($c === 34) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:158: characters 5-10
				break;
			}
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:159: lines 159-210
			if ($c === 92) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:160: lines 160-162
				if ($buf === null) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:161: characters 6-27
					$buf = new \StringBuf();
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:163: characters 5-8
				$buf1 = $buf;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:163: characters 5-43
				$buf1->b = ($buf1->b??'null') . (HxString::substr($this->str, $start, $this->pos - $start - 1)??'null');

				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:164: characters 9-19
				$s1 = $this->str;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:164: characters 9-19
				$index1 = $this->pos++;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:164: characters 9-19
				$c = (strlen($s1) === $index1 ? 0 : ord($s1[$index1]));
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:165: lines 165-196
				switch ($c) {
					case 34:
					case 47:
					case 92:
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:171: characters 41-44
						$buf2 = $buf;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:171: characters 41-55
						$buf2->b = ($buf2->b??'null') . (chr($c)??'null');
						break;
					case 98:
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:169: characters 20-23
						$buf3 = $buf;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:169: characters 20-34
						$buf3->b = ($buf3->b??'null') . (chr(8)??'null');
						break;
					case 102:
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:170: characters 20-23
						$buf4 = $buf;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:170: characters 20-35
						$buf4->b = ($buf4->b??'null') . (chr(12)??'null');
						break;
					case 110:
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:167: characters 20-23
						$buf5 = $buf;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:167: characters 20-42
						$buf5->b = ($buf5->b??'null') . (chr(10)??'null');
						break;
					case 114:
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:166: characters 20-23
						$buf6 = $buf;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:166: characters 20-42
						$buf6->b = ($buf6->b??'null') . (chr(13)??'null');
						break;
					case 116:
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:168: characters 20-23
						$buf7 = $buf;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:168: characters 20-42
						$buf7->b = ($buf7->b??'null') . (chr(9)??'null');
						break;
					case 117:
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:173: characters 6-55
						$uc = \Std::parseInt("0x" . (HxString::substr($this->str, $this->pos, 4)??'null'));
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:174: characters 6-9
						$tmp = $this;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:174: characters 6-14
						$tmp->pos = $tmp->pos + 4;
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:176: lines 176-190
						if ($uc <= 127) {
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:177: characters 7-10
							$buf8 = $buf;
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:177: characters 7-22
							$buf8->b = ($buf8->b??'null') . (chr($uc)??'null');
						} else if ($uc <= 2047) {
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:179: characters 7-10
							$buf9 = $buf;
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:179: characters 7-36
							$buf9->b = ($buf9->b??'null') . (chr(192 | ($uc >> 6))??'null');
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:180: characters 7-10
							$buf10 = $buf;
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:180: characters 7-36
							$buf10->b = ($buf10->b??'null') . (chr(128 | ($uc & 63))??'null');
						} else if ($uc <= 65535) {
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:182: characters 7-10
							$buf11 = $buf;
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:182: characters 7-37
							$buf11->b = ($buf11->b??'null') . (chr(224 | ($uc >> 12))??'null');
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:183: characters 7-10
							$buf12 = $buf;
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:183: characters 7-43
							$buf12->b = ($buf12->b??'null') . (chr(128 | (($uc >> 6) & 63))??'null');
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:184: characters 7-10
							$buf13 = $buf;
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:184: characters 7-36
							$buf13->b = ($buf13->b??'null') . (chr(128 | ($uc & 63))??'null');
						} else {
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:186: characters 7-10
							$buf14 = $buf;
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:186: characters 7-37
							$buf14->b = ($buf14->b??'null') . (chr(240 | ($uc >> 18))??'null');
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:187: characters 7-10
							$buf15 = $buf;
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:187: characters 7-44
							$buf15->b = ($buf15->b??'null') . (chr(128 | (($uc >> 12) & 63))??'null');
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:188: characters 7-10
							$buf16 = $buf;
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:188: characters 7-43
							$buf16->b = ($buf16->b??'null') . (chr(128 | (($uc >> 6) & 63))??'null');
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:189: characters 7-10
							$buf17 = $buf;
							#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:189: characters 7-36
							$buf17->b = ($buf17->b??'null') . (chr(128 | ($uc & 63))??'null');
						}
						break;
					default:
						#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:195: characters 6-11
						throw new HxException("Invalid escape sequence \\" . (chr($c)??'null') . " at position " . (($this->pos - 1)??'null'));
						break;
				}
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:197: characters 5-16
				$start = $this->pos;
			} else if ($c >= 128) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:202: characters 5-10
				$this->pos++;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:203: lines 203-206
				if ($c >= 252) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:203: characters 21-24
					$tmp1 = $this;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:203: characters 21-29
					$tmp1->pos = $tmp1->pos + 4;
				} else if ($c >= 248) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:204: characters 26-29
					$tmp2 = $this;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:204: characters 26-34
					$tmp2->pos = $tmp2->pos + 3;
				} else if ($c >= 240) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:205: characters 26-29
					$tmp3 = $this;
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:205: characters 26-34
					$tmp3->pos = $tmp3->pos + 2;
				} else if ($c >= 224) {
					#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:206: characters 26-31
					$this->pos++;
				}
			} else if ($c === 0) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:210: characters 5-10
				throw new HxException("Unclosed string");
			}
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:212: lines 212-218
		if ($buf === null) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:213: characters 4-45
			return HxString::substr($this->str, $start, $this->pos - $start - 1);
		} else {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:216: characters 4-7
			$buf18 = $buf;
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:216: characters 4-42
			$buf18->b = ($buf18->b??'null') . (HxString::substr($this->str, $start, $this->pos - $start - 1)??'null');

			#/Users/ut/haxe/versions/4.0.0-preview.3/std/haxe/format/JsonParser.hx:217: characters 4-25
			return $buf->b;
		}
	}
}


Boot::registerClass(JsonParser::class, 'haxe.format.JsonParser');
