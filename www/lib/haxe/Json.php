<?php
/**
 * Generated by Haxe 4.0.0 (git build development @ 3018ab1)
 */

namespace haxe;

use \php\_Boot\HxException;
use \php\Boot;
use \haxe\format\JsonPrinter;
use \php\_Boot\HxAnon;

/**
 * Cross-platform JSON API: it will automatically use the optimized native API if available.
 * Use `-D haxeJSON` to force usage of the Haxe implementation even if a native API is found:
 * This will provide extra encoding features such as enums (replaced by their index) and StringMaps.
 * @see https://haxe.org/manual/std-Json.html
 */
class Json {
	/**
	 * @param mixed $value
	 * 
	 * @return mixed
	 */
	static public function convertAfterDecode ($value) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:55: lines 55-63
		if (is_object($value)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:56: characters 4-40
			$result = [];
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:58: lines 58-60
			foreach (((array)($value)) as $fieldName => $fieldValue) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:59: characters 5-55
				$val = Json::convertAfterDecode($fieldValue);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:59: characters 5-55
				$result[$fieldName] = $val;
			};
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:62: characters 4-34
			return new HxAnon($result);
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:65: lines 65-72
		if (is_array($value)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:66: characters 4-42
			$result1 = [];
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:67: lines 67-69
			foreach ($value as $index => $item) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:68: characters 5-45
				$val1 = Json::convertAfterDecode($item);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:68: characters 5-45
				$result1[$index] = $val1;
			};
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:71: characters 4-45
			return \Array_hx::wrap($result1);
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:74: characters 3-15
		return $value;
	}


	/**
	 * @param mixed $value
	 * 
	 * @return mixed
	 */
	static public function convertBeforeEncode ($value) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:90: lines 90-97
		if (($value instanceof \Array_hx)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:91: characters 4-42
			$result = [];
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:92: lines 92-94
			foreach ((Boot::dynamicField($value, 'arr')) as $index => $item) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:93: characters 5-46
				$val = Json::convertBeforeEncode($item);
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:93: characters 5-46
				$result[$index] = $val;
			};
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:96: characters 4-17
			return $result;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:99: lines 99-106
		if (is_object($value)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:100: characters 4-20
			$result1 = new HxAnon();
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:101: lines 101-103
			foreach ($value as $fieldName => $fieldValue) {
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:102: characters 21-27
				$tmp = $result1;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:102: characters 29-38
				$tmp1 = $fieldName;
				#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:102: characters 5-72
				$tmp->{$tmp1} = Json::convertBeforeEncode($fieldValue);
			};
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:105: characters 4-17
			return $result1;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:108: lines 108-110
		if (is_float($value) && !is_finite($value)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:109: characters 4-15
			return null;
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:112: characters 3-15
		return $value;
	}


	/**
	 * @param string $json
	 * 
	 * @return mixed
	 */
	static public function phpJsonDecode ($json) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:47: characters 3-40
		$value = json_decode($json);
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:48: lines 48-50
		if (($value === null) && (json_last_error() !== JSON_ERROR_NONE)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:49: characters 4-9
			throw (is_object($__hx__throw = json_last_error_msg()) && $__hx__throw instanceof \Throwable ? $__hx__throw : new HxException($__hx__throw));
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:51: characters 3-35
		return Json::convertAfterDecode($value);
	}


	/**
	 * @param mixed $value
	 * @param \Closure $replacer
	 * @param string $space
	 * 
	 * @return string
	 */
	static public function phpJsonEncode ($value, $replacer = null, $space = null) {
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:78: lines 78-80
		if ((null !== $replacer) || (null !== $space)) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:79: characters 4-52
			return JsonPrinter::print($value, $replacer, $space);
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:82: characters 3-61
		$json = json_encode(Json::convertBeforeEncode($value));
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:83: lines 83-85
		if (json_last_error() !== JSON_ERROR_NONE) {
			#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:84: characters 11-16
			throw (is_object($__hx__throw = json_last_error_msg()) && $__hx__throw instanceof \Throwable ? $__hx__throw : new HxException($__hx__throw));
		}
		#/Users/ut/haxe/versions/4.0.0-preview.3/std/php/_std/haxe/Json.hx:86: characters 3-14
		return $json;
	}
}


Boot::registerClass(Json::class, 'haxe.Json');
